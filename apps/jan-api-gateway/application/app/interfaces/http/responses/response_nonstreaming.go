package responses

import (
	requesttypes "menlo.ai/jan-api-gateway/app/interfaces/http/requests"
)

// Response represents a model response
// Reference: https://platform.openai.com/docs/api-reference/responses
type Response struct {
	// The unique identifier for the response.
	ID string `json:"id"`

	// The object type, which is always "response".
	Object string `json:"object"`

	// The Unix timestamp (in seconds) when the response was created.
	Created int64 `json:"created"`

	// The ID of the model used for this response.
	Model string `json:"model"`

	// The status of the response.
	Status ResponseStatus `json:"status"`

	// The input that was provided to the model. Can be a string or array of strings.
	Input any `json:"input"`

	// The output generated by the model.
	Output any `json:"output,omitempty"`

	// The system prompt that was used for this response.
	SystemPrompt *string `json:"system_prompt,omitempty"`

	// The maximum number of tokens that were generated.
	MaxTokens *int `json:"max_tokens,omitempty"`

	// The temperature that was used for this response.
	Temperature *float64 `json:"temperature,omitempty"`

	// The top_p that was used for this response.
	TopP *float64 `json:"top_p,omitempty"`

	// The top_k that was used for this response.
	TopK *int `json:"top_k,omitempty"`

	// The repetition penalty that was used for this response.
	RepetitionPenalty *float64 `json:"repetition_penalty,omitempty"`

	// The seed that was used for this response.
	Seed *int `json:"seed,omitempty"`

	// The stop sequences that were used for this response.
	Stop []string `json:"stop,omitempty"`

	// The presence penalty that was used for this response.
	PresencePenalty *float64 `json:"presence_penalty,omitempty"`

	// The frequency penalty that was used for this response.
	FrequencyPenalty *float64 `json:"frequency_penalty,omitempty"`

	// The logit bias that was used for this response.
	LogitBias map[string]float64 `json:"logit_bias,omitempty"`

	// The response format that was used for this response.
	ResponseFormat *requesttypes.ResponseFormat `json:"response_format,omitempty"`

	// The tools that were used for this response.
	Tools []requesttypes.Tool `json:"tools,omitempty"`

	// The tool choice that was used for this response.
	ToolChoice *requesttypes.ToolChoice `json:"tool_choice,omitempty"`

	// The metadata that was provided for this response.
	Metadata map[string]any `json:"metadata,omitempty"`

	// Whether the response was streamed.
	Stream *bool `json:"stream,omitempty"`

	// Whether the response was run in the background.
	Background *bool `json:"background,omitempty"`

	// The timeout in seconds that was used for this response.
	Timeout *int `json:"timeout,omitempty"`

	// The user that was provided for this response.
	User *string `json:"user,omitempty"`

	// The conversation that this response belongs to.
	Conversation *ConversationInfo `json:"conversation,omitempty"`

	// The usage statistics for this response.
	Usage *DetailedUsage `json:"usage,omitempty"`

	// The error that occurred during processing, if any.
	Error *ResponseError `json:"error,omitempty"`

	// The Unix timestamp (in seconds) when the response was completed.
	CompletedAt *int64 `json:"completed_at,omitempty"`

	// The Unix timestamp (in seconds) when the response was cancelled.
	CancelledAt *int64 `json:"cancelled_at,omitempty"`

	// The Unix timestamp (in seconds) when the response was failed.
	FailedAt *int64 `json:"failed_at,omitempty"`

	// OpenAI API response fields
	IncompleteDetails  any         `json:"incomplete_details,omitempty"`
	Instructions       any         `json:"instructions,omitempty"`
	MaxOutputTokens    *int        `json:"max_output_tokens,omitempty"`
	ParallelToolCalls  bool        `json:"parallel_tool_calls,omitempty"`
	PreviousResponseID *string     `json:"previous_response_id,omitempty"`
	Reasoning          *Reasoning  `json:"reasoning,omitempty"`
	Store              bool        `json:"store,omitempty"`
	Text               *TextFormat `json:"text,omitempty"`
	Truncation         string      `json:"truncation,omitempty"`
}

// ResponseStatus represents the status of a response
type ResponseStatus string

const (
	ResponseStatusPending   ResponseStatus = "pending"
	ResponseStatusRunning   ResponseStatus = "running"
	ResponseStatusCompleted ResponseStatus = "completed"
	ResponseStatusCancelled ResponseStatus = "cancelled"
	ResponseStatusFailed    ResponseStatus = "failed"
)

// ResponseOutput represents the output generated by the model
type ResponseOutput struct {
	// The type of output.
	Type OutputType `json:"type"`

	// The text output (for text type).
	Text *TextOutput `json:"text,omitempty"`

	// The image output (for image type).
	Image *ImageOutput `json:"image,omitempty"`

	// The file output (for file type).
	File *FileOutput `json:"file,omitempty"`

	// The web search output (for web_search type).
	WebSearch *WebSearchOutput `json:"web_search,omitempty"`

	// The file search output (for file_search type).
	FileSearch *FileSearchOutput `json:"file_search,omitempty"`

	// The streaming output (for streaming type).
	Streaming *StreamingOutput `json:"streaming,omitempty"`

	// The function calls output (for function_calls type).
	FunctionCalls *FunctionCallsOutput `json:"function_calls,omitempty"`

	// The reasoning output (for reasoning type).
	Reasoning *ReasoningOutput `json:"reasoning,omitempty"`
}

// OutputType represents the type of output
type OutputType string

const (
	OutputTypeText          OutputType = "text"
	OutputTypeImage         OutputType = "image"
	OutputTypeFile          OutputType = "file"
	OutputTypeWebSearch     OutputType = "web_search"
	OutputTypeFileSearch    OutputType = "file_search"
	OutputTypeStreaming     OutputType = "streaming"
	OutputTypeFunctionCalls OutputType = "function_calls"
	OutputTypeReasoning     OutputType = "reasoning"
)

// TextOutput represents a text output
type TextOutput struct {
	// The generated text.
	Value string `json:"value"`

	// The annotations for the text.
	Annotations []Annotation `json:"annotations,omitempty"`
}

// ImageOutput represents an image output
type ImageOutput struct {
	// The URL of the generated image.
	URL string `json:"url"`

	// The format of the image.
	Format string `json:"format"`

	// The size of the image.
	Size *ImageSize `json:"size,omitempty"`
}

// FileOutput represents a file output
type FileOutput struct {
	// The ID of the generated file.
	FileID string `json:"file_id"`

	// The name of the file.
	Name string `json:"name"`

	// The size of the file in bytes.
	Size int64 `json:"size"`

	// The MIME type of the file.
	MimeType string `json:"mime_type"`
}

// WebSearchOutput represents a web search output
type WebSearchOutput struct {
	// The search results.
	Results []WebSearchResult `json:"results"`

	// The search query that was used.
	Query string `json:"query"`
}

// WebSearchResult represents a web search result
type WebSearchResult struct {
	// The title of the result.
	Title string `json:"title"`

	// The URL of the result.
	URL string `json:"url"`

	// The snippet of the result.
	Snippet string `json:"snippet"`

	// The source of the result.
	Source *string `json:"source,omitempty"`
}

// FileSearchOutput represents a file search output
type FileSearchOutput struct {
	// The search results.
	Results []FileSearchResult `json:"results"`

	// The search query that was used.
	Query string `json:"query"`
}

// FileSearchResult represents a file search result
type FileSearchResult struct {
	// The ID of the file.
	FileID string `json:"file_id"`

	// The name of the file.
	Name string `json:"name"`

	// The snippet of the result.
	Snippet string `json:"snippet"`

	// The score of the result.
	Score float64 `json:"score"`
}

// StreamingOutput represents a streaming output
type StreamingOutput struct {
	// The URL that was streamed from.
	URL string `json:"url"`

	// The data that was received.
	Data string `json:"data"`

	// The status code of the response.
	StatusCode int `json:"status_code"`

	// The headers of the response.
	Headers map[string]string `json:"headers"`
}

// FunctionCallsOutput represents function calls output
type FunctionCallsOutput struct {
	// The function calls that were made.
	Calls []FunctionCallResult `json:"calls"`
}

// FunctionCallResult represents a function call result
type FunctionCallResult struct {
	// The name of the function that was called.
	Name string `json:"name"`

	// The arguments that were passed to the function.
	Arguments map[string]any `json:"arguments"`

	// The result of the function call.
	Result any `json:"result"`

	// The error that occurred during the function call, if any.
	Error *string `json:"error,omitempty"`
}

// ReasoningOutput represents a reasoning output
type ReasoningOutput struct {
	// The reasoning task that was performed.
	Task string `json:"task"`

	// The result of the reasoning task.
	Result string `json:"result"`

	// The steps taken during reasoning.
	Steps []ReasoningStep `json:"steps,omitempty"`
}

// ReasoningStep represents a step in reasoning
type ReasoningStep struct {
	// The step number.
	Step int `json:"step"`

	// The description of the step.
	Description string `json:"description"`

	// The result of the step.
	Result string `json:"result"`
}

// Annotation represents an annotation for text
type Annotation struct {
	// The type of annotation.
	Type string `json:"type"`

	// The start index of the annotation.
	StartIndex int `json:"start_index"`

	// The end index of the annotation.
	EndIndex int `json:"end_index"`

	// The text of the annotation.
	Text string `json:"text"`

	// The metadata for the annotation.
	Metadata map[string]any `json:"metadata,omitempty"`
}

// ImageSize represents the size of an image
type ImageSize struct {
	// The width of the image in pixels.
	Width int `json:"width"`

	// The height of the image in pixels.
	Height int `json:"height"`
}

// Usage represents usage statistics
type Usage struct {
	// The number of tokens in the prompt.
	PromptTokens int `json:"prompt_tokens"`

	// The number of tokens in the completion.
	CompletionTokens int `json:"completion_tokens"`

	// The total number of tokens used.
	TotalTokens int `json:"total_tokens"`
}

// ResponseError represents an error that occurred during processing
type ResponseError struct {
	// The error code.
	Code string `json:"code"`

	// The error message.
	Message string `json:"message"`

	// The error details.
	Details map[string]any `json:"details,omitempty"`
}

// InputItem represents an input item for a response
type InputItem struct {
	// The unique identifier for the input item.
	ID string `json:"id"`

	// The object type, which is always "input_item".
	Object string `json:"object"`

	// The Unix timestamp (in seconds) when the input item was created.
	Created int64 `json:"created"`

	// The type of input item.
	Type requesttypes.InputType `json:"type"`

	// The text content (for text type).
	Text *string `json:"text,omitempty"`

	// The image content (for image type).
	Image *requesttypes.ImageInput `json:"image,omitempty"`

	// The file content (for file type).
	File *requesttypes.FileInput `json:"file,omitempty"`

	// The web search content (for web_search type).
	WebSearch *requesttypes.WebSearchInput `json:"web_search,omitempty"`

	// The file search content (for file_search type).
	FileSearch *requesttypes.FileSearchInput `json:"file_search,omitempty"`

	// The streaming content (for streaming type).
	Streaming *requesttypes.StreamingInput `json:"streaming,omitempty"`

	// The function calls content (for function_calls type).
	FunctionCalls *requesttypes.FunctionCallsInput `json:"function_calls,omitempty"`

	// The reasoning content (for reasoning type).
	Reasoning *requesttypes.ReasoningInput `json:"reasoning,omitempty"`
}

// ListInputItemsResponse represents the response for listing input items
type ListInputItemsResponse struct {
	// The object type, which is always "list".
	Object string `json:"object"`

	// The list of input items.
	Data []InputItem `json:"data"`

	// The first ID in the list.
	FirstID *string `json:"first_id,omitempty"`

	// The last ID in the list.
	LastID *string `json:"last_id,omitempty"`

	// Whether there are more items available.
	HasMore bool `json:"has_more"`
}

// ConversationInfo represents the conversation that a response belongs to
type ConversationInfo struct {
	// The unique ID of the conversation.
	ID string `json:"id"`
}

// DetailedUsage represents detailed usage statistics with token details
type DetailedUsage struct {
	// The number of tokens in the prompt.
	InputTokens int `json:"input_tokens"`

	// The number of tokens in the completion.
	OutputTokens int `json:"output_tokens"`

	// The total number of tokens used.
	TotalTokens int `json:"total_tokens"`

	// Details about input tokens.
	InputTokensDetails *TokenDetails `json:"input_tokens_details,omitempty"`

	// Details about output tokens.
	OutputTokensDetails *TokenDetails `json:"output_tokens_details,omitempty"`
}

// TokenDetails represents detailed token information
type TokenDetails struct {
	// The number of cached tokens.
	CachedTokens int `json:"cached_tokens,omitempty"`

	// The number of reasoning tokens.
	ReasoningTokens int `json:"reasoning_tokens,omitempty"`
}

// Reasoning represents reasoning information
type Reasoning struct {
	// The effort level for reasoning.
	Effort *string `json:"effort,omitempty"`

	// The summary of reasoning.
	Summary *string `json:"summary,omitempty"`
}

// TextFormat represents text format information
type TextFormat struct {
	// The format type.
	Format *FormatType `json:"format,omitempty"`
}

// FormatType represents the type of format
type FormatType struct {
	// The type of format.
	Type string `json:"type"`
}
