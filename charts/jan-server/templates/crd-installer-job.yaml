{{- if .Values.inference.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "jan-server.fullname" . }}-install-crds
  labels:
    {{- include "jan-server.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: {{ include "jan-server.fullname" . }}-install-crds
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "jan-server.fullname" . }}-crd-installer
      containers:
      - name: install-crds
        image: alpine/helm:3.13.0
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "Adding Helm repositories..."
          helm repo add nvidia https://helm.ngc.nvidia.com/nvidia || true
          helm repo add kuberay https://ray-project.github.io/kuberay-helm/ || true
          helm repo add aibrix https://danchev.github.io/helm-charts || true
          helm repo update
          
          # Install GPU Operator if enabled
          {{- if .Values.inference.dependencies.gpuOperator.enabled }}
          echo "Installing GPU Operator CRDs..."
          if ! kubectl get crd clusterpolicies.nvidia.com >/dev/null 2>&1; then
            echo "Installing GPU Operator..."
            helm upgrade --install gpu-operator nvidia/gpu-operator \
              --namespace gpu-operator-resources \
              --create-namespace \
              --version {{ .Values.inference.dependencies.gpuOperator.version }} \
              --set operator.cleanupCRD=false \
              --wait --timeout=10m
          else
            echo "✅ GPU Operator CRDs already exist"
          fi
          {{- end }}
          
          # Install KubeRay Operator if enabled
          {{- if .Values.inference.dependencies.kuberayOperator.enabled }}
          echo "Installing KubeRay Operator CRDs..."
          if ! kubectl get crd rayclusters.ray.io >/dev/null 2>&1; then
            echo "Installing KubeRay Operator..."
            helm upgrade --install kuberay-operator kuberay/kuberay-operator \
              --namespace {{ .Values.inference.dependencies.kuberayOperator.namespace }} \
              --create-namespace \
              --version {{ .Values.inference.dependencies.kuberayOperator.version }} \
              --wait --timeout=10m
          else
            echo "✅ KubeRay Operator CRDs already exist"
          fi
          {{- end }}
          
          # Install Envoy Gateway if enabled
          {{- if .Values.inference.dependencies.envoyGateway.enabled }}
          echo "Installing Envoy Gateway CRDs..."
          if ! kubectl get crd gatewayclasses.gateway.networking.k8s.io >/dev/null 2>&1; then
            echo "Installing Envoy Gateway..."
            helm upgrade --install envoy-gateway oci://registry.menlo.ai/dockerhub/envoyproxy/gateway-helm \
              --namespace envoy-gateway-system \
              --create-namespace \
              --version {{ .Values.inference.dependencies.envoyGateway.version }} \
              --wait --timeout=10m
          else
            echo "✅ Envoy Gateway CRDs already exist"
          fi
          {{- end }}
          
          # Install Aibrix if enabled
          {{- if .Values.inference.dependencies.aibrix.enabled }}
          echo "Installing Aibrix CRDs..."
          if ! kubectl get crd podautoscalers.autoscaling.aibrix.ai >/dev/null 2>&1; then
            echo "Installing Aibrix..."
            helm upgrade --install aibrix aibrix/aibrix \
              --namespace aibrix-system \
              --create-namespace \
              --version {{ .Values.inference.dependencies.aibrix.version }} \
              --wait --timeout=10m
          else
            echo "✅ Aibrix CRDs already exist"
          fi
          {{- end }}
          
          echo "✅ All required CRDs are installed!"
          
          # Wait for CRDs to be established
          echo "Waiting for CRDs to be established..."
          {{- if .Values.inference.dependencies.gpuOperator.enabled }}
          kubectl wait --for condition=established --timeout=60s crd/clusterpolicies.nvidia.com || true
          {{- end }}
          {{- if .Values.inference.dependencies.kuberayOperator.enabled }}
          kubectl wait --for condition=established --timeout=60s crd/rayclusters.ray.io || true
          {{- end }}
          {{- if .Values.inference.dependencies.envoyGateway.enabled }}
          kubectl wait --for condition=established --timeout=60s crd/gatewayclasses.gateway.networking.k8s.io || true
          kubectl wait --for condition=established --timeout=60s crd/httproutes.gateway.networking.k8s.io || true
          {{- end }}
          {{- if .Values.inference.dependencies.aibrix.enabled }}
          kubectl wait --for condition=established --timeout=60s crd/podautoscalers.autoscaling.aibrix.ai || true
          {{- end }}
          
          echo "✅ CRDs are ready!"
---
{{- end }}