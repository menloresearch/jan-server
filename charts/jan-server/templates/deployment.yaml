apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "jan-server.fullname" . }}
  labels:
    {{- include "jan-server.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.gateway.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "jan-server.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "jan-server.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- with .Values.gateway.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "jan-server.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.gateway.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.postgresql.enabled }}
        - name: wait-for-postgres
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for PostgreSQL to be ready..."
              until nc -z {{ .Release.Name }}-postgresql 5432; do
                echo "PostgreSQL is not ready yet..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
        {{- end }}
        {{- if .Values.valkey.enabled }}
        - name: wait-for-valkey
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Valkey to be ready..."
              until nc -z {{ .Release.Name }}-valkey 6379; do
                echo "Valkey is not ready yet..."
                sleep 2
              done
              echo "Valkey is ready!"
        {{- end }}
        - name: db-config-builder
          image: busybox:1.35
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "Building database connection strings..."
              {{- if .Values.postgresql.enabled }}
              # Bitnami PostgreSQL
              WRITE_DSN="host={{ .Release.Name }}-postgresql user={{ .Values.postgresql.global.postgresql.auth.username }} password=${DB_PASSWORD} dbname={{ .Values.postgresql.global.postgresql.auth.database }} port=5432 sslmode=disable"
              READ_DSN="host={{ .Release.Name }}-postgresql user={{ .Values.postgresql.global.postgresql.auth.username }} password=${DB_PASSWORD} dbname={{ .Values.postgresql.global.postgresql.auth.database }} port=5432 sslmode=disable"
              {{- else if .Values.externalPostgresql.host }}
              {{- if .Values.externalPostgresql.existingSecret }}
              # External PostgreSQL with existing secret
              WRITE_DSN="host={{ .Values.externalPostgresql.host }} user=${DB_USERNAME} password=${DB_PASSWORD} dbname={{ .Values.externalPostgresql.database }} port={{ .Values.externalPostgresql.port }} sslmode=disable"
              READ_DSN="host={{ .Values.externalPostgresql.host }} user=${DB_USERNAME} password=${DB_PASSWORD} dbname={{ .Values.externalPostgresql.database }} port={{ .Values.externalPostgresql.port }} sslmode=disable"
              {{- else }}
              # External PostgreSQL with plain values
              WRITE_DSN="host={{ .Values.externalPostgresql.host }} user={{ .Values.externalPostgresql.username }} password={{ .Values.externalPostgresql.password }} dbname={{ .Values.externalPostgresql.database }} port={{ .Values.externalPostgresql.port }} sslmode=disable"
              READ_DSN="host={{ .Values.externalPostgresql.host }} user={{ .Values.externalPostgresql.username }} password={{ .Values.externalPostgresql.password }} dbname={{ .Values.externalPostgresql.database }} port={{ .Values.externalPostgresql.port }} sslmode=disable"
              {{- end }}
              {{- end }}
              
              # Write connection strings to shared volume
              echo "export DB_POSTGRESQL_WRITE_DSN='$WRITE_DSN'" > /shared/db-config.env
              echo "export DB_POSTGRESQL_READ1_DSN='$READ_DSN'" >> /shared/db-config.env
              echo "Database configuration written to /shared/db-config.env"
          env:
            {{- if .Values.postgresql.enabled }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-postgresql"
                  key: "password"
            {{- else if .Values.externalPostgresql.existingSecret }}
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalPostgresql.existingSecret }}
                  key: {{ .Values.externalPostgresql.secretKeys.usernameKey }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalPostgresql.existingSecret }}
                  key: {{ .Values.externalPostgresql.secretKeys.passwordKey }}
            {{- end }}
          volumeMounts:
            - name: shared-config
              mountPath: /shared
      containers:
        - name: jan-server
          securityContext:
            {{- toYaml .Values.gateway.securityContext | nindent 12 }}
          image: "{{ .Values.gateway.image.repository }}:{{ .Values.gateway.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.gateway.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.gateway.service.port }}
          command: ["/bin/sh"]
          args:
            - -c
            - |
              # Source the database configuration
              if [ -f /shared/db-config.env ]; then
                echo "Loading database configuration from /shared/db-config.env"
                . /shared/db-config.env
              fi
              # Start the main application
              exec /root/jan-server
          env:
            {{- range .Values.gateway.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            
            {{/* Valkey/Redis Configuration - Cluster mode */}}
            {{- if .Values.valkey.enabled }}
            - name: REDIS_URL
              value: "redis://{{ include "jan-server.fullname" . }}-valkey-cluster:6379"
            {{- if .Values.valkey.usePassword }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ include "jan-server.fullname" . }}-valkey-cluster"
                  key: "valkey-password"
            {{- else }}
            - name: REDIS_PASSWORD
              value: ""
            {{- end }}
            {{- else if .Values.externalValkey.host }}
            - name: REDIS_URL
              value: "redis://{{ .Values.externalValkey.host }}:{{ .Values.externalValkey.port }}"
            {{- if .Values.externalValkey.existingSecret }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalValkey.existingSecret }}
                  key: {{ .Values.externalValkey.secretKeys.passwordKey }}
            {{- else if .Values.externalValkey.password }}
            - name: REDIS_PASSWORD
              value: {{ .Values.externalValkey.password | quote }}
            {{- else }}
            - name: REDIS_PASSWORD
              value: ""
            {{- end }}
            {{- end }}
            
            {{/* OAuth2 Configuration */}}
            {{- if .Values.gateway.oauth2.enabled }}
            {{- if .Values.gateway.oauth2.existingSecret }}
            - name: OAUTH2_GOOGLE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.gateway.oauth2.existingSecret }}"
                  key: google-client-id
            - name: OAUTH2_GOOGLE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.gateway.oauth2.existingSecret }}"
                  key: google-client-secret
            {{- else }}
            - name: OAUTH2_GOOGLE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: "{{ include "jan-server.fullname" . }}-oauth2"
                  key: google-client-id
            - name: OAUTH2_GOOGLE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ include "jan-server.fullname" . }}-oauth2"
                  key: google-client-secret
            {{- end }}
            - name: OAUTH2_GOOGLE_REDIRECT_URL
              value: "{{ .Values.gateway.oauth2.google.redirectUrl }}"
            {{- end }}
            
            {{/* SMTP Configuration */}}
            {{- if .Values.gateway.smtp.enabled }}
            - name: SMTP_HOST
              value: "{{ .Values.gateway.smtp.host }}"
            - name: SMTP_PORT
              value: "{{ .Values.gateway.smtp.port }}"
            {{- if .Values.gateway.smtp.existingSecret }}
            - name: SMTP_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.gateway.smtp.existingSecret }}"
                  key: smtp-username
            - name: SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.gateway.smtp.existingSecret }}"
                  key: smtp-password
            {{- else }}
            - name: SMTP_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "{{ include "jan-server.fullname" . }}-smtp"
                  key: smtp-username
            - name: SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ include "jan-server.fullname" . }}-smtp"
                  key: smtp-password
            {{- end }}
            - name: SMTP_SENDER_EMAIL
              value: "{{ .Values.gateway.smtp.fromEmail }}"
            {{- end }}
            
            {{/* Application Secrets */}}
            {{- if .Values.gateway.secrets.existingSecret }}
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.gateway.secrets.existingSecret }}"
                  key: jwt-secret
            - name: APIKEY_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.gateway.secrets.existingSecret }}"
                  key: apikey-secret
            - name: SERPER_API_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.gateway.secrets.existingSecret }}"
                  key: serper-api-key
            {{- else }}
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ include "jan-server.fullname" . }}-secrets"
                  key: jwt-secret
            - name: APIKEY_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ include "jan-server.fullname" . }}-secrets"
                  key: apikey-secret
            - name: SERPER_API_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ include "jan-server.fullname" . }}-secrets"
                  key: serper-api-key
            {{- end }}
            
            {{/* Other Application Configuration */}}
            - name: ORGANIZATION_ADMIN_EMAIL
              value: "{{ .Values.gateway.secrets.adminEmail }}"
            
            {{/* Additional environment variables */}}
            {{- range .Values.gateway.extraEnv }}
            - name: {{ .name }}
              {{- if .value }}
              value: {{ .value | quote }}
              {{- else if .valueFrom }}
              valueFrom:
                {{- toYaml .valueFrom | nindent 16 }}
              {{- end }}
            {{- end }}
          resources:
            {{- toYaml .Values.gateway.resources | nindent 12 }}
          volumeMounts:
            - name: shared-config
              mountPath: /shared
      volumes:
        - name: shared-config
          emptyDir: {}
      {{- with .Values.gateway.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.gateway.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.gateway.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
