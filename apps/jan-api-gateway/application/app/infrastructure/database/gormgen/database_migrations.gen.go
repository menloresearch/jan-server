// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormgen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"menlo.ai/jan-api-gateway/app/infrastructure/database/dbschema"
)

func newDatabaseMigration(db *gorm.DB, opts ...gen.DOOption) databaseMigration {
	_databaseMigration := databaseMigration{}

	_databaseMigration.databaseMigrationDo.UseDB(db, opts...)
	_databaseMigration.databaseMigrationDo.UseModel(&dbschema.DatabaseMigration{})

	tableName := _databaseMigration.databaseMigrationDo.TableName()
	_databaseMigration.ALL = field.NewAsterisk(tableName)
	_databaseMigration.ID = field.NewUint(tableName, "id")
	_databaseMigration.CreatedAt = field.NewTime(tableName, "created_at")
	_databaseMigration.UpdatedAt = field.NewTime(tableName, "updated_at")
	_databaseMigration.DeletedAt = field.NewField(tableName, "deleted_at")
	_databaseMigration.Version = field.NewString(tableName, "version")

	_databaseMigration.fillFieldMap()

	return _databaseMigration
}

type databaseMigration struct {
	databaseMigrationDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Version   field.String

	fieldMap map[string]field.Expr
}

func (d databaseMigration) Table(newTableName string) *databaseMigration {
	d.databaseMigrationDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d databaseMigration) As(alias string) *databaseMigration {
	d.databaseMigrationDo.DO = *(d.databaseMigrationDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *databaseMigration) updateTableName(table string) *databaseMigration {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.Version = field.NewString(table, "version")

	d.fillFieldMap()

	return d
}

func (d *databaseMigration) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *databaseMigration) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["version"] = d.Version
}

func (d databaseMigration) clone(db *gorm.DB) databaseMigration {
	d.databaseMigrationDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d databaseMigration) replaceDB(db *gorm.DB) databaseMigration {
	d.databaseMigrationDo.ReplaceDB(db)
	return d
}

type databaseMigrationDo struct{ gen.DO }

type IDatabaseMigrationDo interface {
	gen.SubQuery
	Debug() IDatabaseMigrationDo
	WithContext(ctx context.Context) IDatabaseMigrationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDatabaseMigrationDo
	WriteDB() IDatabaseMigrationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDatabaseMigrationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDatabaseMigrationDo
	Not(conds ...gen.Condition) IDatabaseMigrationDo
	Or(conds ...gen.Condition) IDatabaseMigrationDo
	Select(conds ...field.Expr) IDatabaseMigrationDo
	Where(conds ...gen.Condition) IDatabaseMigrationDo
	Order(conds ...field.Expr) IDatabaseMigrationDo
	Distinct(cols ...field.Expr) IDatabaseMigrationDo
	Omit(cols ...field.Expr) IDatabaseMigrationDo
	Join(table schema.Tabler, on ...field.Expr) IDatabaseMigrationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDatabaseMigrationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDatabaseMigrationDo
	Group(cols ...field.Expr) IDatabaseMigrationDo
	Having(conds ...gen.Condition) IDatabaseMigrationDo
	Limit(limit int) IDatabaseMigrationDo
	Offset(offset int) IDatabaseMigrationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDatabaseMigrationDo
	Unscoped() IDatabaseMigrationDo
	Create(values ...*dbschema.DatabaseMigration) error
	CreateInBatches(values []*dbschema.DatabaseMigration, batchSize int) error
	Save(values ...*dbschema.DatabaseMigration) error
	First() (*dbschema.DatabaseMigration, error)
	Take() (*dbschema.DatabaseMigration, error)
	Last() (*dbschema.DatabaseMigration, error)
	Find() ([]*dbschema.DatabaseMigration, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.DatabaseMigration, err error)
	FindInBatches(result *[]*dbschema.DatabaseMigration, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbschema.DatabaseMigration) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDatabaseMigrationDo
	Assign(attrs ...field.AssignExpr) IDatabaseMigrationDo
	Joins(fields ...field.RelationField) IDatabaseMigrationDo
	Preload(fields ...field.RelationField) IDatabaseMigrationDo
	FirstOrInit() (*dbschema.DatabaseMigration, error)
	FirstOrCreate() (*dbschema.DatabaseMigration, error)
	FindByPage(offset int, limit int) (result []*dbschema.DatabaseMigration, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDatabaseMigrationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d databaseMigrationDo) Debug() IDatabaseMigrationDo {
	return d.withDO(d.DO.Debug())
}

func (d databaseMigrationDo) WithContext(ctx context.Context) IDatabaseMigrationDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d databaseMigrationDo) ReadDB() IDatabaseMigrationDo {
	return d.Clauses(dbresolver.Read)
}

func (d databaseMigrationDo) WriteDB() IDatabaseMigrationDo {
	return d.Clauses(dbresolver.Write)
}

func (d databaseMigrationDo) Session(config *gorm.Session) IDatabaseMigrationDo {
	return d.withDO(d.DO.Session(config))
}

func (d databaseMigrationDo) Clauses(conds ...clause.Expression) IDatabaseMigrationDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d databaseMigrationDo) Returning(value interface{}, columns ...string) IDatabaseMigrationDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d databaseMigrationDo) Not(conds ...gen.Condition) IDatabaseMigrationDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d databaseMigrationDo) Or(conds ...gen.Condition) IDatabaseMigrationDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d databaseMigrationDo) Select(conds ...field.Expr) IDatabaseMigrationDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d databaseMigrationDo) Where(conds ...gen.Condition) IDatabaseMigrationDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d databaseMigrationDo) Order(conds ...field.Expr) IDatabaseMigrationDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d databaseMigrationDo) Distinct(cols ...field.Expr) IDatabaseMigrationDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d databaseMigrationDo) Omit(cols ...field.Expr) IDatabaseMigrationDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d databaseMigrationDo) Join(table schema.Tabler, on ...field.Expr) IDatabaseMigrationDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d databaseMigrationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDatabaseMigrationDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d databaseMigrationDo) RightJoin(table schema.Tabler, on ...field.Expr) IDatabaseMigrationDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d databaseMigrationDo) Group(cols ...field.Expr) IDatabaseMigrationDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d databaseMigrationDo) Having(conds ...gen.Condition) IDatabaseMigrationDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d databaseMigrationDo) Limit(limit int) IDatabaseMigrationDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d databaseMigrationDo) Offset(offset int) IDatabaseMigrationDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d databaseMigrationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDatabaseMigrationDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d databaseMigrationDo) Unscoped() IDatabaseMigrationDo {
	return d.withDO(d.DO.Unscoped())
}

func (d databaseMigrationDo) Create(values ...*dbschema.DatabaseMigration) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d databaseMigrationDo) CreateInBatches(values []*dbschema.DatabaseMigration, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d databaseMigrationDo) Save(values ...*dbschema.DatabaseMigration) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d databaseMigrationDo) First() (*dbschema.DatabaseMigration, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.DatabaseMigration), nil
	}
}

func (d databaseMigrationDo) Take() (*dbschema.DatabaseMigration, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.DatabaseMigration), nil
	}
}

func (d databaseMigrationDo) Last() (*dbschema.DatabaseMigration, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.DatabaseMigration), nil
	}
}

func (d databaseMigrationDo) Find() ([]*dbschema.DatabaseMigration, error) {
	result, err := d.DO.Find()
	return result.([]*dbschema.DatabaseMigration), err
}

func (d databaseMigrationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.DatabaseMigration, err error) {
	buf := make([]*dbschema.DatabaseMigration, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d databaseMigrationDo) FindInBatches(result *[]*dbschema.DatabaseMigration, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d databaseMigrationDo) Attrs(attrs ...field.AssignExpr) IDatabaseMigrationDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d databaseMigrationDo) Assign(attrs ...field.AssignExpr) IDatabaseMigrationDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d databaseMigrationDo) Joins(fields ...field.RelationField) IDatabaseMigrationDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d databaseMigrationDo) Preload(fields ...field.RelationField) IDatabaseMigrationDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d databaseMigrationDo) FirstOrInit() (*dbschema.DatabaseMigration, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.DatabaseMigration), nil
	}
}

func (d databaseMigrationDo) FirstOrCreate() (*dbschema.DatabaseMigration, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.DatabaseMigration), nil
	}
}

func (d databaseMigrationDo) FindByPage(offset int, limit int) (result []*dbschema.DatabaseMigration, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d databaseMigrationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d databaseMigrationDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d databaseMigrationDo) Delete(models ...*dbschema.DatabaseMigration) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *databaseMigrationDo) withDO(do gen.Dao) *databaseMigrationDo {
	d.DO = *do.(*gen.DO)
	return d
}
