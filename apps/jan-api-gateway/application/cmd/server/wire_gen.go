// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"menlo.ai/jan-api-gateway/app/domain/apikey"
	"menlo.ai/jan-api-gateway/app/domain/conversation"
	"menlo.ai/jan-api-gateway/app/domain/mcp/serpermcp"
	"menlo.ai/jan-api-gateway/app/domain/organization"
	"menlo.ai/jan-api-gateway/app/domain/project"
	"menlo.ai/jan-api-gateway/app/domain/user"
	"menlo.ai/jan-api-gateway/app/infrastructure/database"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/apikeyrepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/conversationrepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/itemrepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/organizationrepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/projectrepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/transaction"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/userrepo"
	"menlo.ai/jan-api-gateway/app/interfaces/http"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/auth"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/auth/google"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/chat"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/conversations"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/mcp"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/mcp/mcp_impl"
	organization2 "menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/organization"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/organization/projects"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/organization/projects/api_keys"
)

import (
	_ "github.com/grafana/pyroscope-go/godeltaprof/http/pprof"
	_ "net/http/pprof"
)

// Injectors from wire.go:

func CreateApplication() (*Application, error) {
	db, err := database.NewDB()
	if err != nil {
		return nil, err
	}
	transactionDatabase := transaction.NewDatabase(db)
	organizationRepository := organizationrepo.NewOrganizationGormRepository(transactionDatabase)
	projectRepository := projectrepo.NewProjectGormRepository(transactionDatabase)
	projectService := project.NewService(projectRepository)
	organizationService := organization.NewService(organizationRepository, projectService)
	apiKeyRepository := apikeyrepo.NewApiKeyGormRepository(transactionDatabase)
	apiKeyService := apikey.NewService(apiKeyRepository)
	userRepository := userrepo.NewUserGormRepository(transactionDatabase)
	userService := user.NewService(userRepository, organizationService, apiKeyService)
	adminApiKeyAPI := organization2.NewAdminApiKeyAPI(organizationService, apiKeyService, userService)
	projectApiKeyRoute := apikeys.NewProjectApiKeyRoute(organizationService, projectService, apiKeyService, userService)
	projectsRoute := projects.NewProjectsRoute(projectService, apiKeyService, projectApiKeyRoute)
	organizationRoute := organization2.NewOrganizationRoute(adminApiKeyAPI, projectsRoute, userService)
	completionAPI := chat.NewCompletionAPI(apiKeyService)
	chatRoute := chat.NewChatRoute(completionAPI)
	conversationRepository := conversationrepo.NewConversationGormRepository(transactionDatabase)
	itemRepository := itemrepo.NewItemGormRepository(transactionDatabase)
	conversationService := conversation.NewService(conversationRepository, itemRepository)
	conversationAPI := conversations.NewConversationAPI(conversationService, userService)
	modelAPI := v1.NewModelAPI()
	serperService := serpermcp.NewSerperService()
	serperMCP := mcpimpl.NewSerperMCP(serperService)
	mcpapi := mcp.NewMCPAPI(serperMCP)
	googleAuthAPI := google.NewGoogleAuthAPI(userService)
	authRoute := auth.NewAuthRoute(googleAuthAPI, userService)
	v1Route := v1.NewV1Route(organizationRoute, chatRoute, conversationAPI, modelAPI, mcpapi, authRoute)
	httpServer := http.NewHttpServer(v1Route)
	application := &Application{
		HttpServer: httpServer,
	}
	return application, nil
}
