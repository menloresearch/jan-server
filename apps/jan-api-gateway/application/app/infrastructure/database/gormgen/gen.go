// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormgen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                  = new(Query)
	ApiKey             *apiKey
	Conversation       *conversation
	DatabaseMigration  *databaseMigration
	Invite             *invite
	Item               *item
	Organization       *organization
	OrganizationMember *organizationMember
	Project            *project
	ProjectMember      *projectMember
	Response           *response
	User               *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	ApiKey = &Q.ApiKey
	Conversation = &Q.Conversation
	DatabaseMigration = &Q.DatabaseMigration
	Invite = &Q.Invite
	Item = &Q.Item
	Organization = &Q.Organization
	OrganizationMember = &Q.OrganizationMember
	Project = &Q.Project
	ProjectMember = &Q.ProjectMember
	Response = &Q.Response
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                 db,
		ApiKey:             newApiKey(db, opts...),
		Conversation:       newConversation(db, opts...),
		DatabaseMigration:  newDatabaseMigration(db, opts...),
		Invite:             newInvite(db, opts...),
		Item:               newItem(db, opts...),
		Organization:       newOrganization(db, opts...),
		OrganizationMember: newOrganizationMember(db, opts...),
		Project:            newProject(db, opts...),
		ProjectMember:      newProjectMember(db, opts...),
		Response:           newResponse(db, opts...),
		User:               newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ApiKey             apiKey
	Conversation       conversation
	DatabaseMigration  databaseMigration
	Invite             invite
	Item               item
	Organization       organization
	OrganizationMember organizationMember
	Project            project
	ProjectMember      projectMember
	Response           response
	User               user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		ApiKey:             q.ApiKey.clone(db),
		Conversation:       q.Conversation.clone(db),
		DatabaseMigration:  q.DatabaseMigration.clone(db),
		Invite:             q.Invite.clone(db),
		Item:               q.Item.clone(db),
		Organization:       q.Organization.clone(db),
		OrganizationMember: q.OrganizationMember.clone(db),
		Project:            q.Project.clone(db),
		ProjectMember:      q.ProjectMember.clone(db),
		Response:           q.Response.clone(db),
		User:               q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		ApiKey:             q.ApiKey.replaceDB(db),
		Conversation:       q.Conversation.replaceDB(db),
		DatabaseMigration:  q.DatabaseMigration.replaceDB(db),
		Invite:             q.Invite.replaceDB(db),
		Item:               q.Item.replaceDB(db),
		Organization:       q.Organization.replaceDB(db),
		OrganizationMember: q.OrganizationMember.replaceDB(db),
		Project:            q.Project.replaceDB(db),
		ProjectMember:      q.ProjectMember.replaceDB(db),
		Response:           q.Response.replaceDB(db),
		User:               q.User.replaceDB(db),
	}
}

type queryCtx struct {
	ApiKey             IApiKeyDo
	Conversation       IConversationDo
	DatabaseMigration  IDatabaseMigrationDo
	Invite             IInviteDo
	Item               IItemDo
	Organization       IOrganizationDo
	OrganizationMember IOrganizationMemberDo
	Project            IProjectDo
	ProjectMember      IProjectMemberDo
	Response           IResponseDo
	User               IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ApiKey:             q.ApiKey.WithContext(ctx),
		Conversation:       q.Conversation.WithContext(ctx),
		DatabaseMigration:  q.DatabaseMigration.WithContext(ctx),
		Invite:             q.Invite.WithContext(ctx),
		Item:               q.Item.WithContext(ctx),
		Organization:       q.Organization.WithContext(ctx),
		OrganizationMember: q.OrganizationMember.WithContext(ctx),
		Project:            q.Project.WithContext(ctx),
		ProjectMember:      q.ProjectMember.WithContext(ctx),
		Response:           q.Response.WithContext(ctx),
		User:               q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
