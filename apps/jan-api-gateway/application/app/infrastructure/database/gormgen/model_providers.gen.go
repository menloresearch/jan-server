// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormgen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"menlo.ai/jan-api-gateway/app/infrastructure/database/dbschema"
)

func newModelProvider(db *gorm.DB, opts ...gen.DOOption) modelProvider {
	_modelProvider := modelProvider{}

	_modelProvider.modelProviderDo.UseDB(db, opts...)
	_modelProvider.modelProviderDo.UseModel(&dbschema.ModelProvider{})

	tableName := _modelProvider.modelProviderDo.TableName()
	_modelProvider.ALL = field.NewAsterisk(tableName)
	_modelProvider.ID = field.NewUint(tableName, "id")
	_modelProvider.CreatedAt = field.NewTime(tableName, "created_at")
	_modelProvider.UpdatedAt = field.NewTime(tableName, "updated_at")
	_modelProvider.DeletedAt = field.NewField(tableName, "deleted_at")
	_modelProvider.PublicID = field.NewString(tableName, "public_id")
	_modelProvider.OrganizationID = field.NewUint(tableName, "organization_id")
	_modelProvider.ProjectID = field.NewUint(tableName, "project_id")
	_modelProvider.Name = field.NewString(tableName, "name")
	_modelProvider.Type = field.NewString(tableName, "type")
	_modelProvider.Vendor = field.NewString(tableName, "vendor")
	_modelProvider.BaseURL = field.NewString(tableName, "base_url")
	_modelProvider.EncryptedAPIKey = field.NewString(tableName, "encrypted_api_key")
	_modelProvider.APIKeyHint = field.NewString(tableName, "api_key_hint")
	_modelProvider.MetadataJSON = field.NewString(tableName, "metadata_json")
	_modelProvider.Active = field.NewBool(tableName, "active")
	_modelProvider.LastSyncedAt = field.NewTime(tableName, "last_synced_at")

	_modelProvider.fillFieldMap()

	return _modelProvider
}

type modelProvider struct {
	modelProviderDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	PublicID        field.String
	OrganizationID  field.Uint
	ProjectID       field.Uint
	Name            field.String
	Type            field.String
	Vendor          field.String
	BaseURL         field.String
	EncryptedAPIKey field.String
	APIKeyHint      field.String
	MetadataJSON    field.String
	Active          field.Bool
	LastSyncedAt    field.Time

	fieldMap map[string]field.Expr
}

func (m modelProvider) Table(newTableName string) *modelProvider {
	m.modelProviderDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m modelProvider) As(alias string) *modelProvider {
	m.modelProviderDo.DO = *(m.modelProviderDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *modelProvider) updateTableName(table string) *modelProvider {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.PublicID = field.NewString(table, "public_id")
	m.OrganizationID = field.NewUint(table, "organization_id")
	m.ProjectID = field.NewUint(table, "project_id")
	m.Name = field.NewString(table, "name")
	m.Type = field.NewString(table, "type")
	m.Vendor = field.NewString(table, "vendor")
	m.BaseURL = field.NewString(table, "base_url")
	m.EncryptedAPIKey = field.NewString(table, "encrypted_api_key")
	m.APIKeyHint = field.NewString(table, "api_key_hint")
	m.MetadataJSON = field.NewString(table, "metadata_json")
	m.Active = field.NewBool(table, "active")
	m.LastSyncedAt = field.NewTime(table, "last_synced_at")

	m.fillFieldMap()

	return m
}

func (m *modelProvider) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *modelProvider) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 16)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["public_id"] = m.PublicID
	m.fieldMap["organization_id"] = m.OrganizationID
	m.fieldMap["project_id"] = m.ProjectID
	m.fieldMap["name"] = m.Name
	m.fieldMap["type"] = m.Type
	m.fieldMap["vendor"] = m.Vendor
	m.fieldMap["base_url"] = m.BaseURL
	m.fieldMap["encrypted_api_key"] = m.EncryptedAPIKey
	m.fieldMap["api_key_hint"] = m.APIKeyHint
	m.fieldMap["metadata_json"] = m.MetadataJSON
	m.fieldMap["active"] = m.Active
	m.fieldMap["last_synced_at"] = m.LastSyncedAt
}

func (m modelProvider) clone(db *gorm.DB) modelProvider {
	m.modelProviderDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m modelProvider) replaceDB(db *gorm.DB) modelProvider {
	m.modelProviderDo.ReplaceDB(db)
	return m
}

type modelProviderDo struct{ gen.DO }

type IModelProviderDo interface {
	gen.SubQuery
	Debug() IModelProviderDo
	WithContext(ctx context.Context) IModelProviderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IModelProviderDo
	WriteDB() IModelProviderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IModelProviderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IModelProviderDo
	Not(conds ...gen.Condition) IModelProviderDo
	Or(conds ...gen.Condition) IModelProviderDo
	Select(conds ...field.Expr) IModelProviderDo
	Where(conds ...gen.Condition) IModelProviderDo
	Order(conds ...field.Expr) IModelProviderDo
	Distinct(cols ...field.Expr) IModelProviderDo
	Omit(cols ...field.Expr) IModelProviderDo
	Join(table schema.Tabler, on ...field.Expr) IModelProviderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IModelProviderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IModelProviderDo
	Group(cols ...field.Expr) IModelProviderDo
	Having(conds ...gen.Condition) IModelProviderDo
	Limit(limit int) IModelProviderDo
	Offset(offset int) IModelProviderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IModelProviderDo
	Unscoped() IModelProviderDo
	Create(values ...*dbschema.ModelProvider) error
	CreateInBatches(values []*dbschema.ModelProvider, batchSize int) error
	Save(values ...*dbschema.ModelProvider) error
	First() (*dbschema.ModelProvider, error)
	Take() (*dbschema.ModelProvider, error)
	Last() (*dbschema.ModelProvider, error)
	Find() ([]*dbschema.ModelProvider, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.ModelProvider, err error)
	FindInBatches(result *[]*dbschema.ModelProvider, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbschema.ModelProvider) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IModelProviderDo
	Assign(attrs ...field.AssignExpr) IModelProviderDo
	Joins(fields ...field.RelationField) IModelProviderDo
	Preload(fields ...field.RelationField) IModelProviderDo
	FirstOrInit() (*dbschema.ModelProvider, error)
	FirstOrCreate() (*dbschema.ModelProvider, error)
	FindByPage(offset int, limit int) (result []*dbschema.ModelProvider, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IModelProviderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m modelProviderDo) Debug() IModelProviderDo {
	return m.withDO(m.DO.Debug())
}

func (m modelProviderDo) WithContext(ctx context.Context) IModelProviderDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m modelProviderDo) ReadDB() IModelProviderDo {
	return m.Clauses(dbresolver.Read)
}

func (m modelProviderDo) WriteDB() IModelProviderDo {
	return m.Clauses(dbresolver.Write)
}

func (m modelProviderDo) Session(config *gorm.Session) IModelProviderDo {
	return m.withDO(m.DO.Session(config))
}

func (m modelProviderDo) Clauses(conds ...clause.Expression) IModelProviderDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m modelProviderDo) Returning(value interface{}, columns ...string) IModelProviderDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m modelProviderDo) Not(conds ...gen.Condition) IModelProviderDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m modelProviderDo) Or(conds ...gen.Condition) IModelProviderDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m modelProviderDo) Select(conds ...field.Expr) IModelProviderDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m modelProviderDo) Where(conds ...gen.Condition) IModelProviderDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m modelProviderDo) Order(conds ...field.Expr) IModelProviderDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m modelProviderDo) Distinct(cols ...field.Expr) IModelProviderDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m modelProviderDo) Omit(cols ...field.Expr) IModelProviderDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m modelProviderDo) Join(table schema.Tabler, on ...field.Expr) IModelProviderDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m modelProviderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IModelProviderDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m modelProviderDo) RightJoin(table schema.Tabler, on ...field.Expr) IModelProviderDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m modelProviderDo) Group(cols ...field.Expr) IModelProviderDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m modelProviderDo) Having(conds ...gen.Condition) IModelProviderDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m modelProviderDo) Limit(limit int) IModelProviderDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m modelProviderDo) Offset(offset int) IModelProviderDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m modelProviderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IModelProviderDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m modelProviderDo) Unscoped() IModelProviderDo {
	return m.withDO(m.DO.Unscoped())
}

func (m modelProviderDo) Create(values ...*dbschema.ModelProvider) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m modelProviderDo) CreateInBatches(values []*dbschema.ModelProvider, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m modelProviderDo) Save(values ...*dbschema.ModelProvider) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m modelProviderDo) First() (*dbschema.ModelProvider, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ModelProvider), nil
	}
}

func (m modelProviderDo) Take() (*dbschema.ModelProvider, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ModelProvider), nil
	}
}

func (m modelProviderDo) Last() (*dbschema.ModelProvider, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ModelProvider), nil
	}
}

func (m modelProviderDo) Find() ([]*dbschema.ModelProvider, error) {
	result, err := m.DO.Find()
	return result.([]*dbschema.ModelProvider), err
}

func (m modelProviderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.ModelProvider, err error) {
	buf := make([]*dbschema.ModelProvider, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m modelProviderDo) FindInBatches(result *[]*dbschema.ModelProvider, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m modelProviderDo) Attrs(attrs ...field.AssignExpr) IModelProviderDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m modelProviderDo) Assign(attrs ...field.AssignExpr) IModelProviderDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m modelProviderDo) Joins(fields ...field.RelationField) IModelProviderDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m modelProviderDo) Preload(fields ...field.RelationField) IModelProviderDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m modelProviderDo) FirstOrInit() (*dbschema.ModelProvider, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ModelProvider), nil
	}
}

func (m modelProviderDo) FirstOrCreate() (*dbschema.ModelProvider, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ModelProvider), nil
	}
}

func (m modelProviderDo) FindByPage(offset int, limit int) (result []*dbschema.ModelProvider, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m modelProviderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m modelProviderDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m modelProviderDo) Delete(models ...*dbschema.ModelProvider) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *modelProviderDo) withDO(do gen.Dao) *modelProviderDo {
	m.DO = *do.(*gen.DO)
	return m
}
