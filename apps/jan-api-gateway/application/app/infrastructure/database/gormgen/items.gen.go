// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormgen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"menlo.ai/jan-api-gateway/app/infrastructure/database/dbschema"
)

func newItem(db *gorm.DB, opts ...gen.DOOption) item {
	_item := item{}

	_item.itemDo.UseDB(db, opts...)
	_item.itemDo.UseModel(&dbschema.Item{})

	tableName := _item.itemDo.TableName()
	_item.ALL = field.NewAsterisk(tableName)
	_item.ID = field.NewUint(tableName, "id")
	_item.CreatedAt = field.NewTime(tableName, "created_at")
	_item.UpdatedAt = field.NewTime(tableName, "updated_at")
	_item.DeletedAt = field.NewField(tableName, "deleted_at")
	_item.PublicID = field.NewString(tableName, "public_id")
	_item.ConversationID = field.NewUint(tableName, "conversation_id")
	_item.ResponseID = field.NewUint(tableName, "response_id")
	_item.Type = field.NewString(tableName, "type")
	_item.Role = field.NewString(tableName, "role")
	_item.Content = field.NewString(tableName, "content")
	_item.Status = field.NewString(tableName, "status")
	_item.IncompleteAt = field.NewTime(tableName, "incomplete_at")
	_item.IncompleteDetails = field.NewString(tableName, "incomplete_details")
	_item.CompletedAt = field.NewTime(tableName, "completed_at")
	_item.Conversation = itemBelongsToConversation{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Conversation", "dbschema.Conversation"),
		User: struct {
			field.RelationField
			Organizations struct {
				field.RelationField
			}
			Projects struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Conversation.User", "dbschema.User"),
			Organizations: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Conversation.User.Organizations", "dbschema.OrganizationMember"),
			},
			Projects: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Conversation.User.Projects", "dbschema.ProjectMember"),
			},
		},
		Items: struct {
			field.RelationField
			Conversation struct {
				field.RelationField
			}
			Response struct {
				field.RelationField
				UserEntity struct {
					field.RelationField
				}
				Conversation struct {
					field.RelationField
				}
				Items struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Conversation.Items", "dbschema.Item"),
			Conversation: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Conversation.Items.Conversation", "dbschema.Conversation"),
			},
			Response: struct {
				field.RelationField
				UserEntity struct {
					field.RelationField
				}
				Conversation struct {
					field.RelationField
				}
				Items struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Conversation.Items.Response", "dbschema.Response"),
				UserEntity: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Conversation.Items.Response.UserEntity", "dbschema.User"),
				},
				Conversation: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Conversation.Items.Response.Conversation", "dbschema.Conversation"),
				},
				Items: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Conversation.Items.Response.Items", "dbschema.Item"),
				},
			},
		},
	}

	_item.Response = itemBelongsToResponse{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Response", "dbschema.Response"),
	}

	_item.fillFieldMap()

	return _item
}

type item struct {
	itemDo

	ALL               field.Asterisk
	ID                field.Uint
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	PublicID          field.String
	ConversationID    field.Uint
	ResponseID        field.Uint
	Type              field.String
	Role              field.String
	Content           field.String
	Status            field.String
	IncompleteAt      field.Time
	IncompleteDetails field.String
	CompletedAt       field.Time
	Conversation      itemBelongsToConversation

	Response itemBelongsToResponse

	fieldMap map[string]field.Expr
}

func (i item) Table(newTableName string) *item {
	i.itemDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i item) As(alias string) *item {
	i.itemDo.DO = *(i.itemDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *item) updateTableName(table string) *item {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewUint(table, "id")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")
	i.PublicID = field.NewString(table, "public_id")
	i.ConversationID = field.NewUint(table, "conversation_id")
	i.ResponseID = field.NewUint(table, "response_id")
	i.Type = field.NewString(table, "type")
	i.Role = field.NewString(table, "role")
	i.Content = field.NewString(table, "content")
	i.Status = field.NewString(table, "status")
	i.IncompleteAt = field.NewTime(table, "incomplete_at")
	i.IncompleteDetails = field.NewString(table, "incomplete_details")
	i.CompletedAt = field.NewTime(table, "completed_at")

	i.fillFieldMap()

	return i
}

func (i *item) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *item) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 16)
	i.fieldMap["id"] = i.ID
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
	i.fieldMap["public_id"] = i.PublicID
	i.fieldMap["conversation_id"] = i.ConversationID
	i.fieldMap["response_id"] = i.ResponseID
	i.fieldMap["type"] = i.Type
	i.fieldMap["role"] = i.Role
	i.fieldMap["content"] = i.Content
	i.fieldMap["status"] = i.Status
	i.fieldMap["incomplete_at"] = i.IncompleteAt
	i.fieldMap["incomplete_details"] = i.IncompleteDetails
	i.fieldMap["completed_at"] = i.CompletedAt

}

func (i item) clone(db *gorm.DB) item {
	i.itemDo.ReplaceConnPool(db.Statement.ConnPool)
	i.Conversation.db = db.Session(&gorm.Session{Initialized: true})
	i.Conversation.db.Statement.ConnPool = db.Statement.ConnPool
	i.Response.db = db.Session(&gorm.Session{Initialized: true})
	i.Response.db.Statement.ConnPool = db.Statement.ConnPool
	return i
}

func (i item) replaceDB(db *gorm.DB) item {
	i.itemDo.ReplaceDB(db)
	i.Conversation.db = db.Session(&gorm.Session{})
	i.Response.db = db.Session(&gorm.Session{})
	return i
}

type itemBelongsToConversation struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
		Organizations struct {
			field.RelationField
		}
		Projects struct {
			field.RelationField
		}
	}
	Items struct {
		field.RelationField
		Conversation struct {
			field.RelationField
		}
		Response struct {
			field.RelationField
			UserEntity struct {
				field.RelationField
			}
			Conversation struct {
				field.RelationField
			}
			Items struct {
				field.RelationField
			}
		}
	}
}

func (a itemBelongsToConversation) Where(conds ...field.Expr) *itemBelongsToConversation {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a itemBelongsToConversation) WithContext(ctx context.Context) *itemBelongsToConversation {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a itemBelongsToConversation) Session(session *gorm.Session) *itemBelongsToConversation {
	a.db = a.db.Session(session)
	return &a
}

func (a itemBelongsToConversation) Model(m *dbschema.Item) *itemBelongsToConversationTx {
	return &itemBelongsToConversationTx{a.db.Model(m).Association(a.Name())}
}

func (a itemBelongsToConversation) Unscoped() *itemBelongsToConversation {
	a.db = a.db.Unscoped()
	return &a
}

type itemBelongsToConversationTx struct{ tx *gorm.Association }

func (a itemBelongsToConversationTx) Find() (result *dbschema.Conversation, err error) {
	return result, a.tx.Find(&result)
}

func (a itemBelongsToConversationTx) Append(values ...*dbschema.Conversation) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a itemBelongsToConversationTx) Replace(values ...*dbschema.Conversation) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a itemBelongsToConversationTx) Delete(values ...*dbschema.Conversation) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a itemBelongsToConversationTx) Clear() error {
	return a.tx.Clear()
}

func (a itemBelongsToConversationTx) Count() int64 {
	return a.tx.Count()
}

func (a itemBelongsToConversationTx) Unscoped() *itemBelongsToConversationTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type itemBelongsToResponse struct {
	db *gorm.DB

	field.RelationField
}

func (a itemBelongsToResponse) Where(conds ...field.Expr) *itemBelongsToResponse {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a itemBelongsToResponse) WithContext(ctx context.Context) *itemBelongsToResponse {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a itemBelongsToResponse) Session(session *gorm.Session) *itemBelongsToResponse {
	a.db = a.db.Session(session)
	return &a
}

func (a itemBelongsToResponse) Model(m *dbschema.Item) *itemBelongsToResponseTx {
	return &itemBelongsToResponseTx{a.db.Model(m).Association(a.Name())}
}

func (a itemBelongsToResponse) Unscoped() *itemBelongsToResponse {
	a.db = a.db.Unscoped()
	return &a
}

type itemBelongsToResponseTx struct{ tx *gorm.Association }

func (a itemBelongsToResponseTx) Find() (result *dbschema.Response, err error) {
	return result, a.tx.Find(&result)
}

func (a itemBelongsToResponseTx) Append(values ...*dbschema.Response) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a itemBelongsToResponseTx) Replace(values ...*dbschema.Response) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a itemBelongsToResponseTx) Delete(values ...*dbschema.Response) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a itemBelongsToResponseTx) Clear() error {
	return a.tx.Clear()
}

func (a itemBelongsToResponseTx) Count() int64 {
	return a.tx.Count()
}

func (a itemBelongsToResponseTx) Unscoped() *itemBelongsToResponseTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type itemDo struct{ gen.DO }

type IItemDo interface {
	gen.SubQuery
	Debug() IItemDo
	WithContext(ctx context.Context) IItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IItemDo
	WriteDB() IItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IItemDo
	Not(conds ...gen.Condition) IItemDo
	Or(conds ...gen.Condition) IItemDo
	Select(conds ...field.Expr) IItemDo
	Where(conds ...gen.Condition) IItemDo
	Order(conds ...field.Expr) IItemDo
	Distinct(cols ...field.Expr) IItemDo
	Omit(cols ...field.Expr) IItemDo
	Join(table schema.Tabler, on ...field.Expr) IItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IItemDo
	Group(cols ...field.Expr) IItemDo
	Having(conds ...gen.Condition) IItemDo
	Limit(limit int) IItemDo
	Offset(offset int) IItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IItemDo
	Unscoped() IItemDo
	Create(values ...*dbschema.Item) error
	CreateInBatches(values []*dbschema.Item, batchSize int) error
	Save(values ...*dbschema.Item) error
	First() (*dbschema.Item, error)
	Take() (*dbschema.Item, error)
	Last() (*dbschema.Item, error)
	Find() ([]*dbschema.Item, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.Item, err error)
	FindInBatches(result *[]*dbschema.Item, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbschema.Item) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IItemDo
	Assign(attrs ...field.AssignExpr) IItemDo
	Joins(fields ...field.RelationField) IItemDo
	Preload(fields ...field.RelationField) IItemDo
	FirstOrInit() (*dbschema.Item, error)
	FirstOrCreate() (*dbschema.Item, error)
	FindByPage(offset int, limit int) (result []*dbschema.Item, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i itemDo) Debug() IItemDo {
	return i.withDO(i.DO.Debug())
}

func (i itemDo) WithContext(ctx context.Context) IItemDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemDo) ReadDB() IItemDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemDo) WriteDB() IItemDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemDo) Session(config *gorm.Session) IItemDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemDo) Clauses(conds ...clause.Expression) IItemDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemDo) Returning(value interface{}, columns ...string) IItemDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemDo) Not(conds ...gen.Condition) IItemDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemDo) Or(conds ...gen.Condition) IItemDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemDo) Select(conds ...field.Expr) IItemDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemDo) Where(conds ...gen.Condition) IItemDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemDo) Order(conds ...field.Expr) IItemDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemDo) Distinct(cols ...field.Expr) IItemDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemDo) Omit(cols ...field.Expr) IItemDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemDo) Join(table schema.Tabler, on ...field.Expr) IItemDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IItemDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemDo) RightJoin(table schema.Tabler, on ...field.Expr) IItemDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemDo) Group(cols ...field.Expr) IItemDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemDo) Having(conds ...gen.Condition) IItemDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemDo) Limit(limit int) IItemDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemDo) Offset(offset int) IItemDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IItemDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemDo) Unscoped() IItemDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemDo) Create(values ...*dbschema.Item) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemDo) CreateInBatches(values []*dbschema.Item, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemDo) Save(values ...*dbschema.Item) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemDo) First() (*dbschema.Item, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Item), nil
	}
}

func (i itemDo) Take() (*dbschema.Item, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Item), nil
	}
}

func (i itemDo) Last() (*dbschema.Item, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Item), nil
	}
}

func (i itemDo) Find() ([]*dbschema.Item, error) {
	result, err := i.DO.Find()
	return result.([]*dbschema.Item), err
}

func (i itemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.Item, err error) {
	buf := make([]*dbschema.Item, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemDo) FindInBatches(result *[]*dbschema.Item, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemDo) Attrs(attrs ...field.AssignExpr) IItemDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemDo) Assign(attrs ...field.AssignExpr) IItemDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemDo) Joins(fields ...field.RelationField) IItemDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemDo) Preload(fields ...field.RelationField) IItemDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemDo) FirstOrInit() (*dbschema.Item, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Item), nil
	}
}

func (i itemDo) FirstOrCreate() (*dbschema.Item, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Item), nil
	}
}

func (i itemDo) FindByPage(offset int, limit int) (result []*dbschema.Item, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemDo) Delete(models ...*dbschema.Item) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemDo) withDO(do gen.Dao) *itemDo {
	i.DO = *do.(*gen.DO)
	return i
}
