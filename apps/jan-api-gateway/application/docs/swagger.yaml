basePath: /
definitions:
  app_interfaces_http_routes_v1.Model:
    properties:
      created:
        type: integer
      id:
        type: string
      object:
        type: string
      owned_by:
        type: string
    type: object
  app_interfaces_http_routes_v1.ModelsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1.Model'
        type: array
      object:
        type: string
    type: object
  app_interfaces_http_routes_v1_auth.AccessTokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      object:
        type: string
    type: object
  app_interfaces_http_routes_v1_auth.GetMeResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      object:
        type: string
    type: object
  app_interfaces_http_routes_v1_auth_google.AccessTokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      object:
        type: string
    type: object
  app_interfaces_http_routes_v1_auth_google.GoogleCallbackRequest:
    properties:
      code:
        type: string
      state:
        type: string
    required:
    - code
    type: object
  app_interfaces_http_routes_v1_auth_google.GoogleLoginUrl:
    properties:
      object:
        type: string
      url:
        type: string
    type: object
  app_interfaces_http_routes_v1_conv.ExtendedChatCompletionRequest:
    properties:
      chat_template_kwargs:
        additionalProperties: {}
        description: |-
          ChatTemplateKwargs provides a way to add non-standard parameters to the request body.
          Additional kwargs to pass to the template renderer. Will be accessible by the chat template.
          Such as think mode for qwen3. "chat_template_kwargs": {"enable_thinking": false}
          https://qwen.readthedocs.io/en/latest/deployment/vllm.html#thinking-non-thinking-modes
        type: object
      conversation:
        type: string
      frequency_penalty:
        type: number
      function_call:
        description: 'Deprecated: use ToolChoice instead.'
      functions:
        description: 'Deprecated: use Tools instead.'
        items:
          $ref: '#/definitions/openai.FunctionDefinition'
        type: array
      guided_choice:
        description: |-
          GuidedChoice is a vLLM-specific extension that restricts the model's output
          to one of the predefined string choices provided in this field. This feature
          is used to constrain the model's responses to a controlled set of options,
          ensuring predictable and consistent outputs in scenarios where specific
          choices are required.
        items:
          type: string
        type: array
      logit_bias:
        additionalProperties:
          type: integer
        description: |-
          LogitBias is must be a token id string (specified by their token ID in the tokenizer), not a word string.
          incorrect: `"logit_bias":{"You": 6}`, correct: `"logit_bias":{"1639": 6}`
          refs: https://platform.openai.com/docs/api-reference/chat/create#chat/create-logit_bias
        type: object
      logprobs:
        description: |-
          LogProbs indicates whether to return log probabilities of the output tokens or not.
          If true, returns the log probabilities of each output token returned in the content of message.
          This option is currently not available on the gpt-4-vision-preview model.
        type: boolean
      max_completion_tokens:
        description: |-
          MaxCompletionTokens An upper bound for the number of tokens that can be generated for a completion,
          including visible output tokens and reasoning tokens https://platform.openai.com/docs/guides/reasoning
        type: integer
      max_tokens:
        description: |-
          MaxTokens The maximum number of tokens that can be generated in the chat completion.
          This value can be used to control costs for text generated via API.
          Deprecated: use MaxCompletionTokens. Not compatible with o1-series models.
          refs: https://platform.openai.com/docs/api-reference/chat/create#chat-create-max_tokens
        type: integer
      messages:
        items:
          $ref: '#/definitions/openai.ChatCompletionMessage'
        type: array
      metadata:
        additionalProperties:
          type: string
        description: Metadata to store with the completion.
        type: object
      model:
        type: string
      "n":
        type: integer
      parallel_tool_calls:
        description: 'Disable the default behavior of parallel tool calls by setting
          it: false.'
      prediction:
        allOf:
        - $ref: '#/definitions/openai.Prediction'
        description: Configuration for a predicted output.
      presence_penalty:
        type: number
      reasoning_effort:
        description: Controls effort on reasoning for reasoning models. It can be
          set to "low", "medium", or "high".
        type: string
      response_format:
        $ref: '#/definitions/openai.ChatCompletionResponseFormat'
      safety_identifier:
        description: |-
          A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies.
          The IDs should be a string that uniquely identifies each user.
          We recommend hashing their username or email address, in order to avoid sending us any identifying information.
          https://platform.openai.com/docs/api-reference/chat/create#chat_create-safety_identifier
        type: string
      seed:
        type: integer
      service_tier:
        allOf:
        - $ref: '#/definitions/openai.ServiceTier'
        description: Specifies the latency tier to use for processing the request.
      stop:
        items:
          type: string
        type: array
      store:
        description: If true, the response will be stored in the conversation, default
          is false
        type: boolean
      store_reasoning:
        description: If true, the reasoning will be stored in the conversation, default
          is false
        type: boolean
      stream:
        type: boolean
      stream_options:
        allOf:
        - $ref: '#/definitions/openai.StreamOptions'
        description: 'Options for streaming response. Only set this when you set stream:
          true.'
      temperature:
        type: number
      tool_choice:
        description: This can be either a string or an ToolChoice object.
      tools:
        items:
          $ref: '#/definitions/openai.Tool'
        type: array
      top_logprobs:
        description: |-
          TopLogProbs is an integer between 0 and 5 specifying the number of most likely tokens to return at each
          token position, each with an associated log probability.
          logprobs must be set to true if this parameter is used.
        type: integer
      top_p:
        type: number
      user:
        type: string
    type: object
  app_interfaces_http_routes_v1_conv.ExtendedCompletionResponse:
    properties:
      choices:
        items:
          $ref: '#/definitions/openai.ChatCompletionChoice'
        type: array
      created:
        type: integer
      id:
        type: string
      metadata:
        $ref: '#/definitions/app_interfaces_http_routes_v1_conv.ResponseMetadata'
      model:
        type: string
      object:
        type: string
      prompt_filter_results:
        items:
          $ref: '#/definitions/openai.PromptFilterResult'
        type: array
      service_tier:
        $ref: '#/definitions/openai.ServiceTier'
      system_fingerprint:
        type: string
      usage:
        $ref: '#/definitions/openai.Usage'
    type: object
  app_interfaces_http_routes_v1_conv.Model:
    properties:
      created:
        type: integer
      id:
        type: string
      object:
        type: string
      owned_by:
        type: string
    type: object
  app_interfaces_http_routes_v1_conv.ModelsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_conv.Model'
        type: array
      object:
        type: string
    type: object
  app_interfaces_http_routes_v1_conv.ResponseMetadata:
    properties:
      ask_item_id:
        type: string
      completion_item_id:
        type: string
      conversation_created:
        type: boolean
      conversation_id:
        type: string
      conversation_title:
        type: string
      store:
        type: boolean
      store_reasoning:
        type: boolean
    type: object
  app_interfaces_http_routes_v1_conversations.AnnotationResponse:
    properties:
      end_index:
        type: integer
      file_id:
        type: string
      index:
        type: integer
      start_index:
        type: integer
      text:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  app_interfaces_http_routes_v1_conversations.ContentResponse:
    properties:
      file:
        $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.FileContentResponse'
      finish_reason:
        type: string
      image:
        $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.ImageContentResponse'
      input_text:
        type: string
      output_text:
        $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.OutputTextResponse'
      reasoning_content:
        type: string
      text:
        $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.TextResponse'
      type:
        type: string
    type: object
  app_interfaces_http_routes_v1_conversations.ConversationContentRequest:
    properties:
      text:
        type: string
      type:
        type: string
    required:
    - type
    type: object
  app_interfaces_http_routes_v1_conversations.ConversationItemRequest:
    properties:
      content:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.ConversationContentRequest'
        type: array
      role:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_conversation.ItemRole'
      type:
        type: string
    required:
    - content
    - type
    type: object
  app_interfaces_http_routes_v1_conversations.ConversationItemResponse:
    properties:
      content:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.ContentResponse'
        type: array
      created_at:
        type: integer
      id:
        type: string
      object:
        type: string
      role:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  app_interfaces_http_routes_v1_conversations.CreateConversationRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.ConversationItemRequest'
        type: array
      metadata:
        additionalProperties:
          type: string
        type: object
      title:
        type: string
    type: object
  app_interfaces_http_routes_v1_conversations.CreateItemsRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.ConversationItemRequest'
        type: array
    required:
    - items
    type: object
  app_interfaces_http_routes_v1_conversations.DeletedConversationResponse:
    properties:
      deleted:
        type: boolean
      id:
        type: string
      object:
        type: string
    type: object
  app_interfaces_http_routes_v1_conversations.ExtendedConversationResponse:
    properties:
      created_at:
        type: integer
      id:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      object:
        type: string
      title:
        type: string
    type: object
  app_interfaces_http_routes_v1_conversations.FileContentResponse:
    properties:
      file_id:
        type: string
      mime_type:
        type: string
      name:
        type: string
      size:
        type: integer
    type: object
  app_interfaces_http_routes_v1_conversations.ImageContentResponse:
    properties:
      detail:
        type: string
      file_id:
        type: string
      url:
        type: string
    type: object
  app_interfaces_http_routes_v1_conversations.OutputTextResponse:
    properties:
      annotations:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.AnnotationResponse'
        type: array
      text:
        type: string
    type: object
  app_interfaces_http_routes_v1_conversations.TextResponse:
    properties:
      value:
        type: string
    type: object
  app_interfaces_http_routes_v1_conversations.UpdateConversationRequest:
    properties:
      metadata:
        additionalProperties:
          type: string
        type: object
      title:
        type: string
    type: object
  app_interfaces_http_routes_v1_organization.AdminAPIKeyDeletedResponse:
    properties:
      deleted:
        type: boolean
      id:
        type: string
      object:
        type: string
    type: object
  app_interfaces_http_routes_v1_organization.AdminApiKeyListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization.OrganizationAdminAPIKeyResponse'
        type: array
      first_id:
        type: string
      has_more:
        type: boolean
      last_id:
        type: string
      object:
        example: list
        type: string
    type: object
  app_interfaces_http_routes_v1_organization.CreateOrganizationAdminAPIKeyRequest:
    properties:
      name:
        example: My Admin API Key
        type: string
    required:
    - name
    type: object
  app_interfaces_http_routes_v1_organization.OrganizationAdminAPIKeyResponse:
    properties:
      created_at:
        example: 1698765432
        type: integer
      id:
        example: key_1234567890
        type: string
      last_used_at:
        example: 1698765432
        type: integer
      name:
        example: My Admin API Key
        type: string
      object:
        example: api_key
        type: string
      owner:
        $ref: '#/definitions/app_interfaces_http_routes_v1_organization.Owner'
      redacted_value:
        example: sk-...abcd
        type: string
      value:
        example: sk-abcdef1234567890
        type: string
    type: object
  app_interfaces_http_routes_v1_organization.Owner:
    properties:
      created_at:
        example: 1698765432
        type: integer
      id:
        example: user_1234567890
        type: string
      name:
        example: John Doe
        type: string
      object:
        example: user
        type: string
      role:
        example: admin
        type: string
      type:
        example: user
        type: string
    type: object
  app_interfaces_http_routes_v1_organization_invites.CreateInviteUserRequest:
    properties:
      email:
        type: string
      projects:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization_invites.InviteProject'
        type: array
      role:
        type: string
    type: object
  app_interfaces_http_routes_v1_organization_invites.InviteProject:
    properties:
      id:
        type: string
      role:
        type: string
    type: object
  app_interfaces_http_routes_v1_organization_invites.InviteResponse:
    properties:
      accepted_at:
        type: string
      email:
        type: string
      expires_at:
        type: string
      id:
        type: string
      invited_at:
        type: string
      object:
        type: string
      projects:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization_invites.InviteProject'
        type: array
      role:
        type: string
      status:
        type: string
    type: object
  app_interfaces_http_routes_v1_organization_invites.VerifyInviteUserRequest:
    properties:
      code:
        type: string
    type: object
  app_interfaces_http_routes_v1_organization_models.ClusterValidationResponse:
    properties:
      dependencies:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.ClusterDependenciesStatus'
      errors:
        items:
          type: string
        type: array
      gpu_status:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_infrastructure_kubernetes.ClusterGPUStatus'
      valid:
        type: boolean
      warnings:
        items:
          type: string
        type: array
    type: object
  app_interfaces_http_routes_v1_organization_models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  app_interfaces_http_routes_v1_organization_models.GPUResourcesResponse:
    properties:
      availability:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.GPUAvailability'
      gpu_nodes:
        items:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_infrastructure_kubernetes.NodeGPUInfo'
        type: array
      summary:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.GPUResourcesSummary'
      total_nodes:
        type: integer
    type: object
  app_interfaces_http_routes_v1_organization_models.KubernetesStatusResponse:
    properties:
      available:
        type: boolean
      in_cluster:
        type: boolean
      message:
        type: string
    type: object
  app_interfaces_http_routes_v1_organization_models.ModelResponse:
    properties:
      model:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.Model'
    type: object
  app_interfaces_http_routes_v1_organization_models.ModelsListResponse:
    properties:
      models:
        items:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.Model'
        type: array
      total:
        type: integer
    type: object
  app_interfaces_http_routes_v1_organization_projects.CreateProjectRequest:
    properties:
      name:
        example: New AI Project
        type: string
    required:
    - name
    type: object
  app_interfaces_http_routes_v1_organization_projects.ProjectListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.ProjectResponse'
        type: array
      first_id:
        type: string
      has_more:
        type: boolean
      last_id:
        type: string
      object:
        example: list
        type: string
    type: object
  app_interfaces_http_routes_v1_organization_projects.ProjectResponse:
    properties:
      archived_at:
        example: 1698765432
        type: integer
      created_at:
        example: 1698765432
        type: integer
      id:
        example: proj_1234567890
        type: string
      name:
        example: My First Project
        type: string
      object:
        example: project
        type: string
      status:
        type: string
    type: object
  app_interfaces_http_routes_v1_organization_projects.UpdateProjectRequest:
    properties:
      name:
        example: Updated AI Project
        type: string
    type: object
  app_interfaces_http_routes_v1_organization_projects_api_keys.ApiKeyResponse:
    properties:
      apikeyType:
        type: string
      description:
        type: string
      enabled:
        type: boolean
      expiresAt:
        type: string
      id:
        type: string
      key:
        type: string
      last_usedAt:
        type: string
      permissions:
        type: string
      plaintextHint:
        type: string
    type: object
  app_interfaces_http_routes_v1_organization_projects_api_keys.CreateApiKeyRequest:
    properties:
      description:
        type: string
      expiresAt:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_domain_conversation.ItemRole:
    enum:
    - system
    - user
    - assistant
    - tool
    type: string
    x-enum-varnames:
    - ItemRoleSystem
    - ItemRoleUser
    - ItemRoleAssistant
    - ItemRoleTool
  menlo_ai_jan-api-gateway_app_domain_organization_models.ClusterDependenciesStatus:
    properties:
      aibrix_operator:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.DependencyStatus'
      envoy_gateway:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.DependencyStatus'
      gpu_operator:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.DependencyStatus'
      kuberay_operator:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.DependencyStatus'
      namespace:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.DependencyStatus'
      storage_classes:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.DependencyStatus'
    type: object
  menlo_ai_jan-api-gateway_app_domain_organization_models.DependencyStatus:
    properties:
      available:
        type: boolean
      message:
        type: string
      version:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_domain_organization_models.GPUAvailability:
    properties:
      by_type:
        additionalProperties:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.GPUTypeAvailability'
        type: object
    type: object
  menlo_ai_jan-api-gateway_app_domain_organization_models.GPURequirement:
    properties:
      gpu_type:
        description: nvidia, amd, etc.
        type: string
      max_gpus:
        type: integer
      min_gpus:
        type: integer
      min_vram:
        $ref: '#/definitions/resource.Quantity'
      preferred_vram:
        $ref: '#/definitions/resource.Quantity'
    type: object
  menlo_ai_jan-api-gateway_app_domain_organization_models.GPUResourcesSummary:
    properties:
      available_gpus:
        type: integer
      available_vram:
        type: string
      gpu_types:
        items:
          type: string
        type: array
      total_gpus:
        type: integer
      total_vram:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_domain_organization_models.GPUTypeAvailability:
    properties:
      available:
        type: integer
      total:
        type: integer
      vram_per_gpu:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_domain_organization_models.Model:
    properties:
      created_at:
        type: string
      created_by_user_id:
        description: User public ID (e.g. user_abc123)
        type: string
      deployment_name:
        type: string
      description:
        type: string
      display_name:
        type: string
      endpoint_url:
        description: API endpoint information
        type: string
      error_message:
        type: string
      huggingface_id:
        description: Model source information
        type: string
      id:
        description: Model name from Kubernetes
        type: string
      internal_url:
        type: string
      last_event:
        type: string
      managed:
        description: true if managed by jan-server, false if unmanaged (e.g., Aibrix)
        type: boolean
      namespace:
        description: Kubernetes deployment info
        type: string
      organization_id:
        type: integer
      repository_url:
        type: string
      requirements:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.ResourceRequirement'
        description: Resource requirements
      restart_count:
        description: Runtime status info (populated from Kubernetes)
        type: integer
      service_name:
        type: string
      status:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.ModelStatus'
      tags:
        description: Metadata
        items:
          type: string
        type: array
      updated_at:
        type: string
      version:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_domain_organization_models.ModelCreateRequest:
    properties:
      command:
        items:
          type: string
        type: array
      description:
        type: string
      display_name:
        type: string
      gpu_count:
        type: integer
      hugging_face_token:
        type: string
      image:
        type: string
      initial_delay_seconds:
        type: integer
      name:
        type: string
      replicas:
        type: integer
      storage_class:
        type: string
      storage_size:
        type: integer
      tags:
        items:
          type: string
        type: array
    required:
    - display_name
    - image
    - name
    type: object
  menlo_ai_jan-api-gateway_app_domain_organization_models.ModelStatus:
    enum:
    - pending
    - creating
    - running
    - failed
    - stopped
    - crash_loop_back_off
    type: string
    x-enum-varnames:
    - ModelStatusPending
    - ModelStatusCreating
    - ModelStatusRunning
    - ModelStatusFailed
    - ModelStatusStopped
    - ModelStatusCrashLoopBackOff
  menlo_ai_jan-api-gateway_app_domain_organization_models.ResourceRequirement:
    properties:
      cpu:
        $ref: '#/definitions/resource.Quantity'
      gpu:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.GPURequirement'
      memory:
        $ref: '#/definitions/resource.Quantity'
    type: object
  menlo_ai_jan-api-gateway_app_infrastructure_kubernetes.ClusterGPUStatus:
    properties:
      aibrix_ok:
        type: boolean
      envoy_gateway_ok:
        type: boolean
      gpu_nodes:
        items:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_infrastructure_kubernetes.NodeGPUInfo'
        type: array
      gpu_operator_ok:
        type: boolean
      has_gpus:
        type: boolean
      kuberay_ok:
        type: boolean
      total_gpus:
        type: integer
      total_nodes:
        type: integer
    type: object
  menlo_ai_jan-api-gateway_app_infrastructure_kubernetes.NodeGPUInfo:
    properties:
      available_vram:
        $ref: '#/definitions/resource.Quantity'
      gpu_count:
        type: integer
      gpu_type:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      node_name:
        type: string
      total_vram:
        $ref: '#/definitions/resource.Quantity'
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.CreateResponseRequest:
    properties:
      background:
        description: Whether to run the response in the background.
        type: boolean
      conversation:
        description: The conversation ID to append items to. If not set or set to
          ClientCreatedRootConversationID, a new conversation will be created.
        type: string
      frequency_penalty:
        description: The frequency penalty to use for this response.
        type: number
      input:
        description: The input to the model. Can be a string or array of strings.
      logit_bias:
        additionalProperties:
          format: float64
          type: number
        description: The logit bias to use for this response.
        type: object
      max_tokens:
        description: The maximum number of tokens to generate.
        type: integer
      metadata:
        additionalProperties: {}
        description: The metadata to use for this response.
        type: object
      model:
        description: The ID of the model to use for this response.
        type: string
      presence_penalty:
        description: The presence penalty to use for this response.
        type: number
      previous_response_id:
        description: The ID of the previous response to continue from. If set, the
          conversation will be loaded from the previous response.
        type: string
      repetition_penalty:
        description: The repetition penalty to use for this response.
        type: number
      response_format:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.ResponseFormat'
        description: The response format to use for this response.
      seed:
        description: The seed to use for this response.
        type: integer
      stop:
        description: The stop sequences to use for this response.
        items:
          type: string
        type: array
      store:
        description: Whether to store the conversation. If false, no conversation
          will be created or used.
        type: boolean
      stream:
        description: Whether to stream the response.
        type: boolean
      system_prompt:
        description: The system prompt to use for this response.
        type: string
      temperature:
        description: The temperature to use for this response.
        type: number
      timeout:
        description: The timeout in seconds for this response.
        type: integer
      tool_choice:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.ToolChoice'
        description: The tool choice to use for this response.
      tools:
        description: The tools to use for this response.
        items:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.Tool'
        type: array
      top_k:
        description: The top_k to use for this response.
        type: integer
      top_p:
        description: The top_p to use for this response.
        type: number
      user:
        description: The user to use for this response.
        type: string
    required:
    - input
    - model
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.FileInput:
    properties:
      file_id:
        description: The ID of the file.
        type: string
    required:
    - file_id
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.FileSearchInput:
    properties:
      file_ids:
        description: The IDs of the files to search in.
        items:
          type: string
        type: array
      max_results:
        description: The number of results to return.
        type: integer
      query:
        description: The query to search for.
        type: string
    required:
    - file_ids
    - query
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.FunctionCall:
    properties:
      arguments:
        additionalProperties: {}
        description: The arguments to pass to the function.
        type: object
      name:
        description: The name of the function to call.
        type: string
    required:
    - name
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.FunctionCallsInput:
    properties:
      calls:
        description: The function calls to make.
        items:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.FunctionCall'
        type: array
    required:
    - calls
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.FunctionChoice:
    properties:
      name:
        description: The name of the function.
        type: string
    required:
    - name
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.FunctionDefinition:
    properties:
      description:
        description: The description of the function.
        type: string
      name:
        description: The name of the function.
        type: string
      parameters:
        additionalProperties: {}
        description: The parameters of the function.
        type: object
    required:
    - name
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.ImageInput:
    properties:
      data:
        description: The base64 encoded image data.
        type: string
      detail:
        description: The detail level for the image.
        type: string
      url:
        description: The URL of the image.
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.InputType:
    enum:
    - text
    - image
    - file
    - web_search
    - file_search
    - streaming
    - function_calls
    - reasoning
    type: string
    x-enum-varnames:
    - InputTypeText
    - InputTypeImage
    - InputTypeFile
    - InputTypeWebSearch
    - InputTypeFileSearch
    - InputTypeStreaming
    - InputTypeFunctionCalls
    - InputTypeReasoning
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.ReasoningInput:
    properties:
      context:
        description: The context for the reasoning task.
        type: string
      task:
        description: The reasoning task to perform.
        type: string
    required:
    - task
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.ResponseFormat:
    properties:
      type:
        description: The type of response format.
        type: string
    required:
    - type
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.StreamingInput:
    properties:
      body:
        description: The body to send with the request.
        type: string
      headers:
        additionalProperties:
          type: string
        description: The headers to send with the request.
        type: object
      method:
        description: The method to use for the request.
        type: string
      url:
        description: The URL to stream from.
        type: string
    required:
    - url
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.Tool:
    properties:
      function:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.FunctionDefinition'
        description: The function definition for function tools.
      type:
        description: The type of tool.
        type: string
    required:
    - type
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.ToolChoice:
    properties:
      function:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.FunctionChoice'
        description: The function to use for function tool choice.
      type:
        description: The type of tool choice.
        type: string
    required:
    - type
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_requests.WebSearchInput:
    properties:
      max_results:
        description: The number of results to return.
        type: integer
      query:
        description: The query to search for.
        type: string
      search_engine:
        description: The search engine to use.
        type: string
    required:
    - query
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses.ConversationInfo:
    properties:
      id:
        description: The unique ID of the conversation.
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses.DetailedUsage:
    properties:
      input_tokens:
        description: The number of tokens in the prompt.
        type: integer
      input_tokens_details:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.TokenDetails'
        description: Details about input tokens.
      output_tokens:
        description: The number of tokens in the completion.
        type: integer
      output_tokens_details:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.TokenDetails'
        description: Details about output tokens.
      total_tokens:
        description: The total number of tokens used.
        type: integer
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse:
    properties:
      code:
        type: string
      error:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses.FormatType:
    properties:
      type:
        description: The type of format.
        type: string
    type: object
  ? menlo_ai_jan-api-gateway_app_interfaces_http_responses.GeneralResponse-app_interfaces_http_routes_v1_organization_projects_api_keys_ApiKeyResponse
  : properties:
      result:
        $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects_api_keys.ApiKeyResponse'
      status:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses.InputItem:
    properties:
      created:
        description: The Unix timestamp (in seconds) when the input item was created.
        type: integer
      file:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.FileInput'
        description: The file content (for file type).
      file_search:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.FileSearchInput'
        description: The file search content (for file_search type).
      function_calls:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.FunctionCallsInput'
        description: The function calls content (for function_calls type).
      id:
        description: The unique identifier for the input item.
        type: string
      image:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.ImageInput'
        description: The image content (for image type).
      object:
        description: The object type, which is always "input_item".
        type: string
      reasoning:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.ReasoningInput'
        description: The reasoning content (for reasoning type).
      streaming:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.StreamingInput'
        description: The streaming content (for streaming type).
      text:
        description: The text content (for text type).
        type: string
      type:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.InputType'
        description: The type of input item.
      web_search:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.WebSearchInput'
        description: The web search content (for web_search type).
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses.ListInputItemsResponse:
    properties:
      data:
        description: The list of input items.
        items:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.InputItem'
        type: array
      first_id:
        description: The first ID in the list.
        type: string
      has_more:
        description: Whether there are more items available.
        type: boolean
      last_id:
        description: The last ID in the list.
        type: string
      object:
        description: The object type, which is always "list".
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses.Reasoning:
    properties:
      effort:
        description: The effort level for reasoning.
        type: string
      summary:
        description: The summary of reasoning.
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses.Response:
    properties:
      background:
        description: Whether the response was run in the background.
        type: boolean
      cancelled_at:
        description: The Unix timestamp (in seconds) when the response was cancelled.
        type: integer
      completed_at:
        description: The Unix timestamp (in seconds) when the response was completed.
        type: integer
      conversation:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ConversationInfo'
        description: The conversation that this response belongs to.
      created:
        description: The Unix timestamp (in seconds) when the response was created.
        type: integer
      error:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ResponseError'
        description: The error that occurred during processing, if any.
      failed_at:
        description: The Unix timestamp (in seconds) when the response was failed.
        type: integer
      frequency_penalty:
        description: The frequency penalty that was used for this response.
        type: number
      id:
        description: The unique identifier for the response.
        type: string
      incomplete_details:
        description: OpenAI API response fields
      input:
        description: The input that was provided to the model. Can be a string or
          array of strings.
      instructions: {}
      logit_bias:
        additionalProperties:
          format: float64
          type: number
        description: The logit bias that was used for this response.
        type: object
      max_output_tokens:
        type: integer
      max_tokens:
        description: The maximum number of tokens that were generated.
        type: integer
      metadata:
        additionalProperties: {}
        description: The metadata that was provided for this response.
        type: object
      model:
        description: The ID of the model used for this response.
        type: string
      object:
        description: The object type, which is always "response".
        type: string
      output:
        description: The output generated by the model.
      parallel_tool_calls:
        type: boolean
      presence_penalty:
        description: The presence penalty that was used for this response.
        type: number
      previous_response_id:
        type: string
      reasoning:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.Reasoning'
      repetition_penalty:
        description: The repetition penalty that was used for this response.
        type: number
      response_format:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.ResponseFormat'
        description: The response format that was used for this response.
      seed:
        description: The seed that was used for this response.
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ResponseStatus'
        description: The status of the response.
      stop:
        description: The stop sequences that were used for this response.
        items:
          type: string
        type: array
      store:
        type: boolean
      stream:
        description: Whether the response was streamed.
        type: boolean
      system_prompt:
        description: The system prompt that was used for this response.
        type: string
      temperature:
        description: The temperature that was used for this response.
        type: number
      text:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.TextFormat'
      timeout:
        description: The timeout in seconds that was used for this response.
        type: integer
      tool_choice:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.ToolChoice'
        description: The tool choice that was used for this response.
      tools:
        description: The tools that were used for this response.
        items:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.Tool'
        type: array
      top_k:
        description: The top_k that was used for this response.
        type: integer
      top_p:
        description: The top_p that was used for this response.
        type: number
      truncation:
        type: string
      usage:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.DetailedUsage'
        description: The usage statistics for this response.
      user:
        description: The user that was provided for this response.
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses.ResponseError:
    properties:
      code:
        description: The error code.
        type: string
      details:
        additionalProperties: {}
        description: The error details.
        type: object
      message:
        description: The error message.
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses.ResponseStatus:
    enum:
    - pending
    - running
    - completed
    - cancelled
    - failed
    type: string
    x-enum-varnames:
    - ResponseStatusPending
    - ResponseStatusRunning
    - ResponseStatusCompleted
    - ResponseStatusCancelled
    - ResponseStatusFailed
  menlo_ai_jan-api-gateway_app_interfaces_http_responses.TextFormat:
    properties:
      format:
        allOf:
        - $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.FormatType'
        description: The format type.
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses.TokenDetails:
    properties:
      cached_tokens:
        description: The number of cached tokens.
        type: integer
      reasoning_tokens:
        description: The number of reasoning tokens.
        type: integer
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses_openai.DeleteResponse:
    properties:
      deleted:
        type: boolean
      id:
        type: string
      object:
        type: string
    type: object
  ? menlo_ai_jan-api-gateway_app_interfaces_http_responses_openai.ListResponse-app_interfaces_http_routes_v1_conversations_ConversationItemResponse
  : properties:
      data:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.ConversationItemResponse'
        type: array
      first_id:
        type: string
      has_more:
        type: boolean
      last_id:
        type: string
      object:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses_openai.ObjectTypeList'
      total:
        type: integer
    type: object
  ? menlo_ai_jan-api-gateway_app_interfaces_http_responses_openai.ListResponse-app_interfaces_http_routes_v1_conversations_ExtendedConversationResponse
  : properties:
      data:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.ExtendedConversationResponse'
        type: array
      first_id:
        type: string
      has_more:
        type: boolean
      last_id:
        type: string
      object:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses_openai.ObjectTypeList'
      total:
        type: integer
    type: object
  ? menlo_ai_jan-api-gateway_app_interfaces_http_responses_openai.ListResponse-app_interfaces_http_routes_v1_organization_invites_InviteResponse
  : properties:
      data:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization_invites.InviteResponse'
        type: array
      first_id:
        type: string
      has_more:
        type: boolean
      last_id:
        type: string
      object:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses_openai.ObjectTypeList'
      total:
        type: integer
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses_openai.ObjectTypeList:
    enum:
    - list
    type: string
    x-enum-varnames:
    - ObjectTypeListList
  openai.ChatCompletionChoice:
    properties:
      content_filter_results:
        $ref: '#/definitions/openai.ContentFilterResults'
      finish_reason:
        allOf:
        - $ref: '#/definitions/openai.FinishReason'
        description: |-
          FinishReason
          stop: API returned complete message,
          or a message terminated by one of the stop sequences provided via the stop parameter
          length: Incomplete model output due to max_tokens parameter or token limit
          function_call: The model decided to call a function
          content_filter: Omitted content due to a flag from our content filters
          null: API response still in progress or incomplete
      index:
        type: integer
      logprobs:
        $ref: '#/definitions/openai.LogProbs'
      message:
        $ref: '#/definitions/openai.ChatCompletionMessage'
    type: object
  openai.ChatCompletionMessage:
    properties:
      content:
        type: string
      function_call:
        $ref: '#/definitions/openai.FunctionCall'
      multiContent:
        items:
          $ref: '#/definitions/openai.ChatMessagePart'
        type: array
      name:
        description: |-
          This property isn't in the official documentation, but it's in
          the documentation for the official library for python:
          - https://github.com/openai/openai-python/blob/main/chatml.md
          - https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb
        type: string
      reasoning_content:
        description: |-
          This property is used for the "reasoning" feature supported by deepseek-reasoner
          which is not in the official documentation.
          the doc from deepseek:
          - https://api-docs.deepseek.com/api/create-chat-completion#responses
        type: string
      refusal:
        type: string
      role:
        type: string
      tool_call_id:
        description: For Role=tool prompts this should be set to the ID given in the
          assistant's prior request to call a tool.
        type: string
      tool_calls:
        description: For Role=assistant prompts this may be set to the tool calls
          generated by the model, such as function calls.
        items:
          $ref: '#/definitions/openai.ToolCall'
        type: array
    type: object
  openai.ChatCompletionRequest:
    properties:
      chat_template_kwargs:
        additionalProperties: {}
        description: |-
          ChatTemplateKwargs provides a way to add non-standard parameters to the request body.
          Additional kwargs to pass to the template renderer. Will be accessible by the chat template.
          Such as think mode for qwen3. "chat_template_kwargs": {"enable_thinking": false}
          https://qwen.readthedocs.io/en/latest/deployment/vllm.html#thinking-non-thinking-modes
        type: object
      frequency_penalty:
        type: number
      function_call:
        description: 'Deprecated: use ToolChoice instead.'
      functions:
        description: 'Deprecated: use Tools instead.'
        items:
          $ref: '#/definitions/openai.FunctionDefinition'
        type: array
      guided_choice:
        description: |-
          GuidedChoice is a vLLM-specific extension that restricts the model's output
          to one of the predefined string choices provided in this field. This feature
          is used to constrain the model's responses to a controlled set of options,
          ensuring predictable and consistent outputs in scenarios where specific
          choices are required.
        items:
          type: string
        type: array
      logit_bias:
        additionalProperties:
          type: integer
        description: |-
          LogitBias is must be a token id string (specified by their token ID in the tokenizer), not a word string.
          incorrect: `"logit_bias":{"You": 6}`, correct: `"logit_bias":{"1639": 6}`
          refs: https://platform.openai.com/docs/api-reference/chat/create#chat/create-logit_bias
        type: object
      logprobs:
        description: |-
          LogProbs indicates whether to return log probabilities of the output tokens or not.
          If true, returns the log probabilities of each output token returned in the content of message.
          This option is currently not available on the gpt-4-vision-preview model.
        type: boolean
      max_completion_tokens:
        description: |-
          MaxCompletionTokens An upper bound for the number of tokens that can be generated for a completion,
          including visible output tokens and reasoning tokens https://platform.openai.com/docs/guides/reasoning
        type: integer
      max_tokens:
        description: |-
          MaxTokens The maximum number of tokens that can be generated in the chat completion.
          This value can be used to control costs for text generated via API.
          Deprecated: use MaxCompletionTokens. Not compatible with o1-series models.
          refs: https://platform.openai.com/docs/api-reference/chat/create#chat-create-max_tokens
        type: integer
      messages:
        items:
          $ref: '#/definitions/openai.ChatCompletionMessage'
        type: array
      metadata:
        additionalProperties:
          type: string
        description: Metadata to store with the completion.
        type: object
      model:
        type: string
      "n":
        type: integer
      parallel_tool_calls:
        description: 'Disable the default behavior of parallel tool calls by setting
          it: false.'
      prediction:
        allOf:
        - $ref: '#/definitions/openai.Prediction'
        description: Configuration for a predicted output.
      presence_penalty:
        type: number
      reasoning_effort:
        description: Controls effort on reasoning for reasoning models. It can be
          set to "low", "medium", or "high".
        type: string
      response_format:
        $ref: '#/definitions/openai.ChatCompletionResponseFormat'
      safety_identifier:
        description: |-
          A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies.
          The IDs should be a string that uniquely identifies each user.
          We recommend hashing their username or email address, in order to avoid sending us any identifying information.
          https://platform.openai.com/docs/api-reference/chat/create#chat_create-safety_identifier
        type: string
      seed:
        type: integer
      service_tier:
        allOf:
        - $ref: '#/definitions/openai.ServiceTier'
        description: Specifies the latency tier to use for processing the request.
      stop:
        items:
          type: string
        type: array
      store:
        description: |-
          Store can be set to true to store the output of this completion request for use in distillations and evals.
          https://platform.openai.com/docs/api-reference/chat/create#chat-create-store
        type: boolean
      stream:
        type: boolean
      stream_options:
        allOf:
        - $ref: '#/definitions/openai.StreamOptions'
        description: 'Options for streaming response. Only set this when you set stream:
          true.'
      temperature:
        type: number
      tool_choice:
        description: This can be either a string or an ToolChoice object.
      tools:
        items:
          $ref: '#/definitions/openai.Tool'
        type: array
      top_logprobs:
        description: |-
          TopLogProbs is an integer between 0 and 5 specifying the number of most likely tokens to return at each
          token position, each with an associated log probability.
          logprobs must be set to true if this parameter is used.
        type: integer
      top_p:
        type: number
      user:
        type: string
    type: object
  openai.ChatCompletionResponse:
    properties:
      choices:
        items:
          $ref: '#/definitions/openai.ChatCompletionChoice'
        type: array
      created:
        type: integer
      id:
        type: string
      model:
        type: string
      object:
        type: string
      prompt_filter_results:
        items:
          $ref: '#/definitions/openai.PromptFilterResult'
        type: array
      service_tier:
        $ref: '#/definitions/openai.ServiceTier'
      system_fingerprint:
        type: string
      usage:
        $ref: '#/definitions/openai.Usage'
    type: object
  openai.ChatCompletionResponseFormat:
    properties:
      json_schema:
        $ref: '#/definitions/openai.ChatCompletionResponseFormatJSONSchema'
      type:
        $ref: '#/definitions/openai.ChatCompletionResponseFormatType'
    type: object
  openai.ChatCompletionResponseFormatJSONSchema:
    properties:
      description:
        type: string
      name:
        type: string
      schema: {}
      strict:
        type: boolean
    type: object
  openai.ChatCompletionResponseFormatType:
    enum:
    - json_object
    - json_schema
    - text
    type: string
    x-enum-varnames:
    - ChatCompletionResponseFormatTypeJSONObject
    - ChatCompletionResponseFormatTypeJSONSchema
    - ChatCompletionResponseFormatTypeText
  openai.ChatMessageImageURL:
    properties:
      detail:
        $ref: '#/definitions/openai.ImageURLDetail'
      url:
        type: string
    type: object
  openai.ChatMessagePart:
    properties:
      image_url:
        $ref: '#/definitions/openai.ChatMessageImageURL'
      text:
        type: string
      type:
        $ref: '#/definitions/openai.ChatMessagePartType'
    type: object
  openai.ChatMessagePartType:
    enum:
    - text
    - image_url
    type: string
    x-enum-varnames:
    - ChatMessagePartTypeText
    - ChatMessagePartTypeImageURL
  openai.CompletionTokensDetails:
    properties:
      accepted_prediction_tokens:
        type: integer
      audio_tokens:
        type: integer
      reasoning_tokens:
        type: integer
      rejected_prediction_tokens:
        type: integer
    type: object
  openai.ContentFilterResults:
    properties:
      hate:
        $ref: '#/definitions/openai.Hate'
      jailbreak:
        $ref: '#/definitions/openai.JailBreak'
      profanity:
        $ref: '#/definitions/openai.Profanity'
      self_harm:
        $ref: '#/definitions/openai.SelfHarm'
      sexual:
        $ref: '#/definitions/openai.Sexual'
      violence:
        $ref: '#/definitions/openai.Violence'
    type: object
  openai.FinishReason:
    enum:
    - stop
    - length
    - function_call
    - tool_calls
    - content_filter
    - "null"
    type: string
    x-enum-varnames:
    - FinishReasonStop
    - FinishReasonLength
    - FinishReasonFunctionCall
    - FinishReasonToolCalls
    - FinishReasonContentFilter
    - FinishReasonNull
  openai.FunctionCall:
    properties:
      arguments:
        description: call function with arguments in JSON format
        type: string
      name:
        type: string
    type: object
  openai.FunctionDefinition:
    properties:
      description:
        type: string
      name:
        type: string
      parameters:
        description: |-
          Parameters is an object describing the function.
          You can pass json.RawMessage to describe the schema,
          or you can pass in a struct which serializes to the proper JSON schema.
          The jsonschema package is provided for convenience, but you should
          consider another specialized library if you require more complex schemas.
      strict:
        type: boolean
    type: object
  openai.Hate:
    properties:
      filtered:
        type: boolean
      severity:
        type: string
    type: object
  openai.ImageURLDetail:
    enum:
    - high
    - low
    - auto
    type: string
    x-enum-varnames:
    - ImageURLDetailHigh
    - ImageURLDetailLow
    - ImageURLDetailAuto
  openai.JailBreak:
    properties:
      detected:
        type: boolean
      filtered:
        type: boolean
    type: object
  openai.LogProb:
    properties:
      bytes:
        description: Omitting the field if it is null
        items:
          type: integer
        type: array
      logprob:
        type: number
      token:
        type: string
      top_logprobs:
        description: |-
          TopLogProbs is a list of the most likely tokens and their log probability, at this token position.
          In rare cases, there may be fewer than the number of requested top_logprobs returned.
        items:
          $ref: '#/definitions/openai.TopLogProbs'
        type: array
    type: object
  openai.LogProbs:
    properties:
      content:
        description: Content is a list of message content tokens with log probability
          information.
        items:
          $ref: '#/definitions/openai.LogProb'
        type: array
    type: object
  openai.Prediction:
    properties:
      content:
        type: string
      type:
        type: string
    type: object
  openai.Profanity:
    properties:
      detected:
        type: boolean
      filtered:
        type: boolean
    type: object
  openai.PromptFilterResult:
    properties:
      content_filter_results:
        $ref: '#/definitions/openai.ContentFilterResults'
      index:
        type: integer
    type: object
  openai.PromptTokensDetails:
    properties:
      audio_tokens:
        type: integer
      cached_tokens:
        type: integer
    type: object
  openai.SelfHarm:
    properties:
      filtered:
        type: boolean
      severity:
        type: string
    type: object
  openai.ServiceTier:
    enum:
    - auto
    - default
    - flex
    - priority
    type: string
    x-enum-varnames:
    - ServiceTierAuto
    - ServiceTierDefault
    - ServiceTierFlex
    - ServiceTierPriority
  openai.Sexual:
    properties:
      filtered:
        type: boolean
      severity:
        type: string
    type: object
  openai.StreamOptions:
    properties:
      include_usage:
        description: |-
          If set, an additional chunk will be streamed before the data: [DONE] message.
          The usage field on this chunk shows the token usage statistics for the entire request,
          and the choices field will always be an empty array.
          All other chunks will also include a usage field, but with a null value.
        type: boolean
    type: object
  openai.Tool:
    properties:
      function:
        $ref: '#/definitions/openai.FunctionDefinition'
      type:
        $ref: '#/definitions/openai.ToolType'
    type: object
  openai.ToolCall:
    properties:
      function:
        $ref: '#/definitions/openai.FunctionCall'
      id:
        type: string
      index:
        description: Index is not nil only in chat completion chunk object
        type: integer
      type:
        $ref: '#/definitions/openai.ToolType'
    type: object
  openai.ToolType:
    enum:
    - function
    type: string
    x-enum-varnames:
    - ToolTypeFunction
  openai.TopLogProbs:
    properties:
      bytes:
        items:
          type: integer
        type: array
      logprob:
        type: number
      token:
        type: string
    type: object
  openai.Usage:
    properties:
      completion_tokens:
        type: integer
      completion_tokens_details:
        $ref: '#/definitions/openai.CompletionTokensDetails'
      prompt_tokens:
        type: integer
      prompt_tokens_details:
        $ref: '#/definitions/openai.PromptTokensDetails'
      total_tokens:
        type: integer
    type: object
  openai.Violence:
    properties:
      filtered:
        type: boolean
      severity:
        type: string
    type: object
  resource.Quantity:
    properties:
      Format:
        enum:
        - DecimalExponent
        - BinarySI
        - DecimalSI
        type: string
        x-enum-comments:
          BinarySI: e.g., 12Mi (12 * 2^20)
          DecimalExponent: e.g., 12e6
          DecimalSI: e.g., 12M  (12 * 10^6)
        x-enum-descriptions:
        - e.g., 12e6
        - e.g., 12Mi (12 * 2^20)
        - e.g., 12M  (12 * 10^6)
        x-enum-varnames:
        - DecimalExponent
        - BinarySI
        - DecimalSI
    type: object
info:
  contact: {}
  description: This is the API gateway for Jan Server.
  title: Jan Server
  version: "1.0"
paths:
  /v1/auth/google/callback:
    post:
      consumes:
      - application/json
      description: Handles the callback from the Google OAuth2 provider to exchange
        the authorization code for a token, verify the user, and issue access and
        refresh tokens.
      parameters:
      - description: Request body containing the authorization code and state
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_v1_auth_google.GoogleCallbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated and returned tokens
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_auth_google.AccessTokenResponse'
        "400":
          description: Bad request (e.g., invalid state, missing code, or invalid
            claims)
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized (e.g., a user claim is not found or is invalid
            in the context)
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      summary: Google OAuth2 Callback
      tags:
      - Authentication API
  /v1/auth/google/login:
    get:
      description: Redirects the user to the Google OAuth2 authorization page to initiate
        the login process.
      responses:
        "200":
          description: redirect url
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_auth_google.GoogleLoginUrl'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      summary: Google OAuth2 Login
      tags:
      - Authentication API
  /v1/auth/guest-login:
    post:
      description: JWT-base Guest Login.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed the access token
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_auth.AccessTokenResponse'
        "400":
          description: Bad Request (e.g., invalid refresh token)
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized (e.g., expired or missing refresh token)
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      summary: Guest Login
      tags:
      - Authentication API
  /v1/auth/logout:
    get:
      consumes:
      - application/json
      description: Use a valid refresh token to obtain a new access token. The refresh
        token is typically sent in a cookie.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logout
        "400":
          description: Bad Request (e.g., invalid refresh token)
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized (e.g., expired or missing refresh token)
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      summary: Refresh an access token
      tags:
      - Authentication API
  /v1/auth/me:
    get:
      description: Retrieves the profile of the authenticated user based on the provided
        JWT.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user profile
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_auth.GetMeResponse'
        "401":
          description: Unauthorized (e.g., missing or invalid JWT)
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Authentication API
  /v1/auth/refresh-token:
    get:
      consumes:
      - application/json
      description: Use a valid refresh token to obtain a new access token. The refresh
        token is typically sent in a cookie.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed the access token
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_auth.AccessTokenResponse'
        "400":
          description: Bad Request (e.g., invalid refresh token)
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized (e.g., expired or missing refresh token)
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      summary: Refresh an access token
      tags:
      - Authentication API
  /v1/chat/completions:
    post:
      consumes:
      - application/json
      description: |-
        Generates a model response for the given chat conversation. This is a standard chat completion API that supports both streaming and non-streaming modes without conversation persistence.

        **Streaming Mode (stream=true):**
        - Returns Server-Sent Events (SSE) with real-time streaming
        - Streams completion chunks directly from the inference model
        - Final event contains "[DONE]" marker

        **Non-Streaming Mode (stream=false or omitted):**
        - Returns single JSON response with complete completion
        - Standard OpenAI ChatCompletionResponse format

        **Features:**
        - Supports all OpenAI ChatCompletionRequest parameters
        - User authentication required
        - Direct inference model integration
        - No conversation persistence (stateless)
      parameters:
      - description: Chat completion request with streaming options
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/openai.ChatCompletionRequest'
      produces:
      - application/json
      - text/event-stream
      responses:
        "200":
          description: 'Successful streaming response (when stream=true) - SSE format
            with data: {json} events'
          schema:
            type: string
        "400":
          description: Invalid request payload, empty messages, or inference failure
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized - missing or invalid authentication
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a chat completion
      tags:
      - Chat Completions API
  /v1/conv/chat/completions:
    post:
      consumes:
      - application/json
      description: |-
        Generates a model response for the given chat conversation with conversation persistence and management. This is the conversation-aware version of the chat completion API that supports both streaming and non-streaming modes with conversation management and storage options.

        **Streaming Mode (stream=true):**
        - Returns Server-Sent Events (SSE) with real-time streaming
        - First event contains conversation metadata
        - Subsequent events contain completion chunks
        - Final event contains "[DONE]" marker

        **Non-Streaming Mode (stream=false or omitted):**
        - Returns single JSON response with complete completion
        - Includes conversation metadata in response

        **Storage Options:**
        - `store=true`: Saves user message and assistant response to conversation
        - `store_reasoning=true`: Includes reasoning content in stored messages
        - `conversation`: ID of existing conversation or empty for new conversation

        **Features:**
        - Conversation persistence and history management
        - Extended request format with conversation and storage options
        - User authentication required
        - Automatic conversation creation and management
      parameters:
      - description: Extended chat completion request with streaming, storage, and
          conversation options
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_v1_conv.ExtendedChatCompletionRequest'
      produces:
      - application/json
      - text/event-stream
      responses:
        "200":
          description: 'Successful streaming response (when stream=true) - SSE format
            with data: {json} events'
          schema:
            type: string
        "400":
          description: Invalid request payload or conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized - missing or invalid authentication
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found or user not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a conversation-aware chat completion
      tags:
      - Conversation-aware Chat API
  /v1/conv/mcp:
    post:
      consumes:
      - application/json
      description: Handles Model Context Protocol (MCP) requests over an HTTP stream
        for conversation-aware chat functionality. The response is sent as a continuous
        stream of data with conversation context.
      parameters:
      - description: MCP request payload
        in: body
        name: request
        required: true
        schema: {}
      produces:
      - text/event-stream
      responses:
        "200":
          description: Streamed response (SSE or chunked transfer)
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: MCP streamable endpoint for conversation-aware chat
      tags:
      - Conversation-aware Chat API
  /v1/conv/models:
    get:
      consumes:
      - application/json
      description: Retrieves a list of available models that can be used for conversation-aware
        chat completions. This endpoint provides the same model list as the standard
        /v1/models endpoint but is specifically designed for conversation-aware chat
        functionality.
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_conv.ModelsResponse'
        "401":
          description: Unauthorized - missing or invalid authentication
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List available models for conversation-aware chat
      tags:
      - Conversation-aware Chat API
  /v1/conversations:
    get:
      description: Retrieves a paginated list of conversations for the authenticated
        user with OpenAI-compatible response format.
      parameters:
      - default: 20
        description: The maximum number of items to return
        in: query
        name: limit
        type: integer
      - description: A cursor for use in pagination. The ID of the last object from
          the previous page
        in: query
        name: after
        type: string
      - description: Order of items (asc/desc)
        in: query
        name: order
        type: string
      responses:
        "200":
          description: Successfully retrieved the list of conversations
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses_openai.ListResponse-app_interfaces_http_routes_v1_conversations_ExtendedConversationResponse'
        "400":
          description: Bad Request - Invalid pagination parameters
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Conversations
      tags:
      - Conversations API
    post:
      consumes:
      - application/json
      description: Creates a new conversation for the authenticated user with optional
        items
      parameters:
      - description: Create conversation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.CreateConversationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created conversation
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.ExtendedConversationResponse'
        "400":
          description: Invalid request - Bad payload, too many items, or invalid item
            format
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a conversation
      tags:
      - Conversations API
  /v1/conversations/{conversation_id}:
    delete:
      description: Deletes a conversation and all its items permanently
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deleted conversation
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.DeletedConversationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a conversation
      tags:
      - Conversations API
    get:
      description: Retrieves a conversation by its ID with full metadata and title
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Conversation details
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.ExtendedConversationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a conversation
      tags:
      - Conversations API
    patch:
      consumes:
      - application/json
      description: Updates conversation title and/or metadata
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Update conversation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.UpdateConversationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated conversation
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.ExtendedConversationResponse'
        "400":
          description: Invalid request payload or update failed
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a conversation
      tags:
      - Conversations API
  /v1/conversations/{conversation_id}/items:
    get:
      description: Lists all items in a conversation with OpenAI-compatible pagination
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Number of items to return (1-100)
        in: query
        name: limit
        type: integer
      - description: Cursor for pagination - ID of the last item from previous page
        in: query
        name: after
        type: string
      - description: Order of items (asc/desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of items
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses_openai.ListResponse-app_interfaces_http_routes_v1_conversations_ConversationItemResponse'
        "400":
          description: Bad Request - Invalid pagination parameters
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List items in a conversation
      tags:
      - Conversations API
    post:
      consumes:
      - application/json
      description: Adds multiple items to a conversation with OpenAI-compatible format
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Create items request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.CreateItemsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created items
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses_openai.ListResponse-app_interfaces_http_routes_v1_conversations_ConversationItemResponse'
        "400":
          description: Invalid request payload or invalid item format
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create items in a conversation
      tags:
      - Conversations API
  /v1/conversations/{conversation_id}/items/{item_id}:
    delete:
      description: Deletes a specific item from a conversation and returns the deleted
        item details
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deleted item details
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.ConversationItemResponse'
        "400":
          description: Bad Request - Deletion failed
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation or item not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an item from a conversation
      tags:
      - Conversations API
    get:
      description: Retrieves a specific item from a conversation with full content
        details
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item details
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_conversations.ConversationItemResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation or item not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an item from a conversation
      tags:
      - Conversations API
  /v1/mcp:
    post:
      consumes:
      - application/json
      description: Handles Model Context Protocol (MCP) requests over an HTTP stream.
        The response is sent as a continuous stream of data.
      parameters:
      - description: MCP request payload
        in: body
        name: request
        required: true
        schema: {}
      produces:
      - text/event-stream
      responses:
        "200":
          description: Streamed response (SSE or chunked transfer)
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: MCP streamable endpoint
      tags:
      - Chat Completions API
  /v1/models:
    get:
      consumes:
      - application/json
      description: Retrieves a list of available models that can be used for chat
        completions or other tasks.
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1.ModelsResponse'
      security:
      - BearerAuth: []
      summary: List available models
      tags:
      - Chat Completions API
  /v1/organization/admin_api_keys:
    get:
      description: Retrieves a paginated list of all admin API keys for the authenticated
        organization.
      parameters:
      - default: 20
        description: The maximum number of items to return
        in: query
        name: limit
        type: integer
      - description: A cursor for use in pagination. The ID of the last object from
          the previous page
        in: query
        name: after
        type: string
      responses:
        "200":
          description: Successfully retrieved the list of admin API keys
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization.AdminApiKeyListResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Admin API Keys
      tags:
      - Administration API
    post:
      consumes:
      - application/json
      description: Creates a new admin API key for an organization. Requires a valid
        admin API key in the Authorization header.
      parameters:
      - description: API key creation request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization.CreateOrganizationAdminAPIKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created admin API key
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization.OrganizationAdminAPIKeyResponse'
        "400":
          description: Bad request - invalid payload
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Admin API Key
      tags:
      - Administration API
  /v1/organization/admin_api_keys/{id}:
    delete:
      description: Deletes an admin API key by its ID.
      parameters:
      - description: ID of the admin API key to delete
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Successfully deleted the admin API key
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization.AdminAPIKeyDeletedResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found - API key with the given ID does not exist or does
            not belong to the organization
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Admin API Key
      tags:
      - Administration API
    get:
      description: Retrieves a specific admin API key by its ID.
      parameters:
      - description: ID of the admin API key
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Successfully retrieved the admin API key
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization.OrganizationAdminAPIKeyResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found - API key with the given ID does not exist or does
            not belong to the organization
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Admin API Key
      tags:
      - Administration API
  /v1/organization/invites:
    get:
      description: Retrieves a paginated list of invites for the current organization.
      parameters:
      - description: Cursor pointing to a record after which to fetch results
        in: query
        name: after
        type: string
      - description: Maximum number of results to return
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: Successfully retrieved list of invites
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses_openai.ListResponse-app_interfaces_http_routes_v1_organization_invites_InviteResponse'
        "400":
          description: Invalid or missing query parameter
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Organization Invites
      tags:
      - Administration API
    post:
      consumes:
      - application/json
      description: Creates a new invite for a user to join the organization.
      parameters:
      - description: Invite request payload
        in: body
        name: invite
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization_invites.CreateInviteUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created invite
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_invites.InviteResponse'
        "400":
          description: Invalid request payload or user already exists
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Invite
      tags:
      - Administration API
  /v1/organization/invites/{invite_id}:
    delete:
      description: Deletes a specific invite by its ID. Only organization owners can
        delete invites.
      parameters:
      - description: Public ID of the invite
        in: path
        name: invite_id
        required: true
        type: string
      responses:
        "200":
          description: Successfully deleted invite
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses_openai.DeleteResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Forbidden - only owners can delete invites
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Invite not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Invite
      tags:
      - Administration API
    get:
      description: Retrieves a specific invite by its ID.
      parameters:
      - description: Public ID of the invite
        in: path
        name: invite_id
        required: true
        type: string
      responses:
        "200":
          description: Successfully retrieved invite
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_invites.InviteResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Invite not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve Invite
      tags:
      - Administration API
  /v1/organization/invites/verification:
    post:
      consumes:
      - application/json
      description: Verifies an invitation code, checks expiration, registers the user
        if necessary, and assigns project memberships.
      parameters:
      - description: Verification request payload
        in: body
        name: verification
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization_invites.VerifyInviteUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully verified invite
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_invites.InviteResponse'
        "400":
          description: Invalid or expired invite code
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Verify Invite
      tags:
      - Administration API
  /v1/organization/kubernetes:
    get:
      consumes:
      - application/json
      description: Check if the application is running in a Kubernetes cluster and
        has access to K8s APIs
      produces:
      - application/json
      responses:
        "200":
          description: Kubernetes status
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.KubernetesStatusResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Check Kubernetes availability
      tags:
      - Kubernetes
  /v1/organization/kubernetes/cluster-status:
    get:
      consumes:
      - application/json
      description: Check if the Kubernetes cluster has all required dependencies and
        configurations for managed model deployment
      produces:
      - application/json
      responses:
        "200":
          description: Cluster validation results
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ClusterValidationResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
        "403":
          description: Forbidden - Kubernetes not available
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Validate cluster dependencies
      tags:
      - Kubernetes
  /v1/organization/kubernetes/gpu-resources:
    get:
      consumes:
      - application/json
      description: Get detailed information about GPU resources in the Kubernetes
        cluster including availability and usage
      produces:
      - application/json
      responses:
        "200":
          description: GPU resources information
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.GPUResourcesResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get GPU resources information
      tags:
      - Kubernetes
  /v1/organization/models:
    get:
      consumes:
      - application/json
      description: Get all models belonging to the organization (both managed and
        unmanaged)
      parameters:
      - description: Filter by model status
        in: query
        name: status
        type: string
      - description: Filter by managed (true) or unmanaged (false) models
        in: query
        name: managed
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: List of models
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ModelsListResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
        "403":
          description: Forbidden - models API not available
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List organization models
      tags:
      - Models
    post:
      consumes:
      - application/json
      description: Create a new AI model for the organization
      parameters:
      - description: Model creation request
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_domain_organization_models.ModelCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created model
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ModelResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
        "403":
          description: Forbidden - models API not available
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new model
      tags:
      - Models
  /v1/organization/models/{model_id}:
    delete:
      consumes:
      - application/json
      description: Delete a model and its associated Kubernetes resources
      parameters:
      - description: Model name
        in: path
        name: model_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Model deleted successfully
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
        "403":
          description: Forbidden - models API not available
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
        "404":
          description: Model not found
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a model
      tags:
      - Models
    get:
      consumes:
      - application/json
      description: Get details of a specific model by its name
      parameters:
      - description: Model name
        in: path
        name: model_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Model details
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ModelResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
        "403":
          description: Forbidden - models API not available
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
        "404":
          description: Model not found
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a model by name
      tags:
      - Models
  /v1/organization/projects:
    get:
      description: Retrieves a paginated list of all projects for the authenticated
        organization.
      parameters:
      - default: 20
        description: The maximum number of items to return
        in: query
        name: limit
        type: integer
      - description: A cursor for use in pagination. The ID of the last object from
          the previous page
        in: query
        name: after
        type: string
      - description: Whether to include archived projects.
        in: query
        name: include_archived
        type: string
      responses:
        "200":
          description: Successfully retrieved the list of projects
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.ProjectListResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Projects
      tags:
      - Administration API
    post:
      consumes:
      - application/json
      description: Creates a new project for an organization.
      parameters:
      - description: Project creation request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.CreateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created project
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.ProjectResponse'
        "400":
          description: Bad request - invalid payload
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Project
      tags:
      - Administration API
  /v1/organization/projects/{project_id}:
    get:
      description: Retrieves a specific project by its ID.
      parameters:
      - description: ID of the project
        in: path
        name: project_id
        required: true
        type: string
      responses:
        "200":
          description: Successfully retrieved the project
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.ProjectResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found - project with the given ID does not exist or does
            not belong to the organization
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Project
      tags:
      - Administration API
    post:
      consumes:
      - application/json
      description: Updates a specific project by its ID.
      parameters:
      - description: ID of the project to update
        in: path
        name: project_id
        required: true
        type: string
      - description: Project update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.UpdateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the project
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.ProjectResponse'
        "400":
          description: Bad request - invalid payload
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found - project with the given ID does not exist
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Project
      tags:
      - Administration API
  /v1/organization/projects/{project_id}/archive:
    post:
      description: Archives a specific project by its ID, making it inactive.
      parameters:
      - description: ID of the project to archive
        in: path
        name: project_id
        required: true
        type: string
      responses:
        "200":
          description: Successfully archived the project
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.ProjectResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found - project with the given ID does not exist
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Archive Project
      tags:
      - Administration API
  /v1/organization/projects/{project_public_id}/api_keys:
    get:
      consumes:
      - application/json
      description: List API keys for a specific project.
      parameters:
      - description: Project Public ID
        in: path
        name: project_public_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: API key created successfully
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.GeneralResponse-app_interfaces_http_routes_v1_organization_projects_api_keys_ApiKeyResponse'
        "400":
          description: Bad request, e.g., invalid payload or missing IDs
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized, e.g., invalid or missing token
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found, e.g., project or organization not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List new project API key
      tags:
      - Administration API
    post:
      consumes:
      - application/json
      description: Creates a new API key for a specific project.
      parameters:
      - description: Project Public ID
        in: path
        name: project_public_id
        required: true
        type: string
      - description: Request body for creating an API key
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects_api_keys.CreateApiKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: API key created successfully
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.GeneralResponse-app_interfaces_http_routes_v1_organization_projects_api_keys_ApiKeyResponse'
        "400":
          description: Bad request, e.g., invalid payload or missing IDs
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized, e.g., invalid or missing token
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found, e.g., project or organization not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new project API key
      tags:
      - Administration API
  /v1/responses:
    post:
      consumes:
      - application/json
      description: |-
        Creates a new LLM response for the given input. Supports multiple input types including text, images, files, web search, and more.

        **Supported Input Types:**
        - `text`: Plain text input
        - `image`: Image input (URL or base64)
        - `file`: File input by file ID
        - `web_search`: Web search input
        - `file_search`: File search input
        - `streaming`: Streaming input
        - `function_calls`: Function calls input
        - `reasoning`: Reasoning input

        **Example Request:**
        ```json
        {
        "model": "gpt-4",
        "input": {
        "type": "text",
        "text": "Hello, how are you?"
        },
        "max_tokens": 100,
        "temperature": 0.7,
        "stream": false,
        "background": false
        }
        ```

        **Response Format:**
        The response uses embedded structure where all fields are at the top level:
        - `jan_status`: Jan API status code (optional)
        - `id`: Response identifier
        - `object`: Object type ("response")
        - `created`: Unix timestamp
        - `model`: Model used
        - `status`: Response status
        - `input`: Input data
        - `output`: Generated output

        **Example Response:**
        ```json
        {
        "jan_status": "000000",
        "id": "resp_1234567890",
        "object": "response",
        "created": 1234567890,
        "model": "gpt-4",
        "status": "completed",
        "input": {
        "type": "text",
        "text": "Hello, how are you?"
        },
        "output": {
        "type": "text",
        "text": {
        "value": "I'm doing well, thank you!"
        }
        }
        }
        ```

        **Response Status:**
        - `completed`: Response generation finished successfully
        - `processing`: Response is being generated
        - `failed`: Response generation failed
        - `cancelled`: Response was cancelled
      parameters:
      - description: Request payload containing model, input, and generation parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_requests.CreateResponseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created response
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.Response'
        "202":
          description: Response accepted for background processing
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.Response'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a response
      tags:
      - Responses API
  /v1/responses/{response_id}:
    delete:
      consumes:
      - application/json
      description: |-
        Deletes an LLM response by its ID. Returns the deleted response object with embedded structure where all fields are at the top level.

        **Response Format:**
        The response uses embedded structure where all fields are at the top level:
        - `jan_status`: Jan API status code (optional)
        - `id`: Response identifier
        - `object`: Object type ("response")
        - `created`: Unix timestamp
        - `model`: Model used
        - `status`: Response status (will be "cancelled")
        - `input`: Input data
        - `cancelled_at`: Cancellation timestamp
      parameters:
      - description: Unique identifier of the response
        in: path
        name: response_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deleted response
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Response not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a response
      tags:
      - Responses API
    get:
      consumes:
      - application/json
      description: |-
        Retrieves an LLM response by its ID. Returns the complete response object with embedded structure where all fields are at the top level.

        **Response Format:**
        The response uses embedded structure where all fields are at the top level:
        - `jan_status`: Jan API status code (optional)
        - `id`: Response identifier
        - `object`: Object type ("response")
        - `created`: Unix timestamp
        - `model`: Model used
        - `status`: Response status
        - `input`: Input data
        - `output`: Generated output
      parameters:
      - description: Unique identifier of the response
        in: path
        name: response_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response details
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Response not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a response
      tags:
      - Responses API
  /v1/responses/{response_id}/cancel:
    post:
      consumes:
      - application/json
      description: |-
        Cancels a running LLM response that was created with background=true. Only responses that are currently processing can be cancelled.

        **Response Format:**
        The response uses embedded structure where all fields are at the top level:
        - `jan_status`: Jan API status code (optional)
        - `id`: Response identifier
        - `object`: Object type ("response")
        - `created`: Unix timestamp
        - `model`: Model used
        - `status`: Response status (will be "cancelled")
        - `input`: Input data
        - `cancelled_at`: Cancellation timestamp
      parameters:
      - description: Unique identifier of the response to cancel
        in: path
        name: response_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response cancelled successfully
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.Response'
        "400":
          description: Invalid request or response cannot be cancelled
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Response not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cancel a response
      tags:
      - Responses API
  /v1/responses/{response_id}/input_items:
    get:
      consumes:
      - application/json
      description: |-
        Retrieves a paginated list of input items for a response. Supports cursor-based pagination for efficient retrieval of large datasets.

        **Response Format:**
        The response uses embedded structure where all fields are at the top level:
        - `jan_status`: Jan API status code (optional)
        - `first_id`: First item ID for pagination (optional)
        - `last_id`: Last item ID for pagination (optional)
        - `has_more`: Whether more items are available (optional)
        - `id`: Input item identifier
        - `object`: Object type ("input_item")
        - `created`: Unix timestamp
        - `type`: Input type
        - `text`: Text content (for text type)
        - `image`: Image content (for image type)
        - `file`: File content (for file type)

        **Example Response:**
        ```json
        {
        "jan_status": "000000",
        "first_id": "input_123",
        "last_id": "input_456",
        "has_more": false,
        "id": "input_1234567890",
        "object": "input_item",
        "created": 1234567890,
        "type": "text",
        "text": "Hello, world!"
        }
        ```
      parameters:
      - description: Unique identifier of the response
        in: path
        name: response_id
        required: true
        type: string
      - description: 'Maximum number of items to return (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Cursor for pagination - return items after this ID
        in: query
        name: after
        type: string
      - description: Cursor for pagination - return items before this ID
        in: query
        name: before
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of input items
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ListInputItemsResponse'
        "400":
          description: Invalid request or pagination parameters
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Response not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List input items
      tags:
      - Responses API
  /v1/version:
    get:
      description: Returns the current build version of the API server.
      produces:
      - application/json
      responses:
        "200":
          description: version info
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get API build version
      tags:
      - Server API
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
