// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormgen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"menlo.ai/jan-api-gateway/app/infrastructure/database/dbschema"
)

func newInvite(db *gorm.DB, opts ...gen.DOOption) invite {
	_invite := invite{}

	_invite.inviteDo.UseDB(db, opts...)
	_invite.inviteDo.UseModel(&dbschema.Invite{})

	tableName := _invite.inviteDo.TableName()
	_invite.ALL = field.NewAsterisk(tableName)
	_invite.ID = field.NewUint(tableName, "id")
	_invite.CreatedAt = field.NewTime(tableName, "created_at")
	_invite.UpdatedAt = field.NewTime(tableName, "updated_at")
	_invite.DeletedAt = field.NewField(tableName, "deleted_at")
	_invite.PublicID = field.NewString(tableName, "public_id")
	_invite.Email = field.NewString(tableName, "email")
	_invite.Role = field.NewString(tableName, "role")
	_invite.Status = field.NewString(tableName, "status")
	_invite.InvitedAt = field.NewTime(tableName, "invited_at")
	_invite.ExpiresAt = field.NewTime(tableName, "expires_at")
	_invite.AcceptedAt = field.NewTime(tableName, "accepted_at")
	_invite.Secrets = field.NewString(tableName, "secrets")
	_invite.Projects = field.NewString(tableName, "projects")
	_invite.OrganizationID = field.NewUint(tableName, "organization_id")

	_invite.fillFieldMap()

	return _invite
}

type invite struct {
	inviteDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	PublicID       field.String
	Email          field.String
	Role           field.String
	Status         field.String
	InvitedAt      field.Time
	ExpiresAt      field.Time
	AcceptedAt     field.Time
	Secrets        field.String
	Projects       field.String
	OrganizationID field.Uint

	fieldMap map[string]field.Expr
}

func (i invite) Table(newTableName string) *invite {
	i.inviteDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i invite) As(alias string) *invite {
	i.inviteDo.DO = *(i.inviteDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *invite) updateTableName(table string) *invite {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewUint(table, "id")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")
	i.PublicID = field.NewString(table, "public_id")
	i.Email = field.NewString(table, "email")
	i.Role = field.NewString(table, "role")
	i.Status = field.NewString(table, "status")
	i.InvitedAt = field.NewTime(table, "invited_at")
	i.ExpiresAt = field.NewTime(table, "expires_at")
	i.AcceptedAt = field.NewTime(table, "accepted_at")
	i.Secrets = field.NewString(table, "secrets")
	i.Projects = field.NewString(table, "projects")
	i.OrganizationID = field.NewUint(table, "organization_id")

	i.fillFieldMap()

	return i
}

func (i *invite) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *invite) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 14)
	i.fieldMap["id"] = i.ID
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
	i.fieldMap["public_id"] = i.PublicID
	i.fieldMap["email"] = i.Email
	i.fieldMap["role"] = i.Role
	i.fieldMap["status"] = i.Status
	i.fieldMap["invited_at"] = i.InvitedAt
	i.fieldMap["expires_at"] = i.ExpiresAt
	i.fieldMap["accepted_at"] = i.AcceptedAt
	i.fieldMap["secrets"] = i.Secrets
	i.fieldMap["projects"] = i.Projects
	i.fieldMap["organization_id"] = i.OrganizationID
}

func (i invite) clone(db *gorm.DB) invite {
	i.inviteDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i invite) replaceDB(db *gorm.DB) invite {
	i.inviteDo.ReplaceDB(db)
	return i
}

type inviteDo struct{ gen.DO }

type IInviteDo interface {
	gen.SubQuery
	Debug() IInviteDo
	WithContext(ctx context.Context) IInviteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInviteDo
	WriteDB() IInviteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInviteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInviteDo
	Not(conds ...gen.Condition) IInviteDo
	Or(conds ...gen.Condition) IInviteDo
	Select(conds ...field.Expr) IInviteDo
	Where(conds ...gen.Condition) IInviteDo
	Order(conds ...field.Expr) IInviteDo
	Distinct(cols ...field.Expr) IInviteDo
	Omit(cols ...field.Expr) IInviteDo
	Join(table schema.Tabler, on ...field.Expr) IInviteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInviteDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInviteDo
	Group(cols ...field.Expr) IInviteDo
	Having(conds ...gen.Condition) IInviteDo
	Limit(limit int) IInviteDo
	Offset(offset int) IInviteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInviteDo
	Unscoped() IInviteDo
	Create(values ...*dbschema.Invite) error
	CreateInBatches(values []*dbschema.Invite, batchSize int) error
	Save(values ...*dbschema.Invite) error
	First() (*dbschema.Invite, error)
	Take() (*dbschema.Invite, error)
	Last() (*dbschema.Invite, error)
	Find() ([]*dbschema.Invite, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.Invite, err error)
	FindInBatches(result *[]*dbschema.Invite, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbschema.Invite) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInviteDo
	Assign(attrs ...field.AssignExpr) IInviteDo
	Joins(fields ...field.RelationField) IInviteDo
	Preload(fields ...field.RelationField) IInviteDo
	FirstOrInit() (*dbschema.Invite, error)
	FirstOrCreate() (*dbschema.Invite, error)
	FindByPage(offset int, limit int) (result []*dbschema.Invite, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInviteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i inviteDo) Debug() IInviteDo {
	return i.withDO(i.DO.Debug())
}

func (i inviteDo) WithContext(ctx context.Context) IInviteDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i inviteDo) ReadDB() IInviteDo {
	return i.Clauses(dbresolver.Read)
}

func (i inviteDo) WriteDB() IInviteDo {
	return i.Clauses(dbresolver.Write)
}

func (i inviteDo) Session(config *gorm.Session) IInviteDo {
	return i.withDO(i.DO.Session(config))
}

func (i inviteDo) Clauses(conds ...clause.Expression) IInviteDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i inviteDo) Returning(value interface{}, columns ...string) IInviteDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i inviteDo) Not(conds ...gen.Condition) IInviteDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i inviteDo) Or(conds ...gen.Condition) IInviteDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i inviteDo) Select(conds ...field.Expr) IInviteDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i inviteDo) Where(conds ...gen.Condition) IInviteDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i inviteDo) Order(conds ...field.Expr) IInviteDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i inviteDo) Distinct(cols ...field.Expr) IInviteDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i inviteDo) Omit(cols ...field.Expr) IInviteDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i inviteDo) Join(table schema.Tabler, on ...field.Expr) IInviteDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i inviteDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInviteDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i inviteDo) RightJoin(table schema.Tabler, on ...field.Expr) IInviteDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i inviteDo) Group(cols ...field.Expr) IInviteDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i inviteDo) Having(conds ...gen.Condition) IInviteDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i inviteDo) Limit(limit int) IInviteDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i inviteDo) Offset(offset int) IInviteDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i inviteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInviteDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i inviteDo) Unscoped() IInviteDo {
	return i.withDO(i.DO.Unscoped())
}

func (i inviteDo) Create(values ...*dbschema.Invite) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i inviteDo) CreateInBatches(values []*dbschema.Invite, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i inviteDo) Save(values ...*dbschema.Invite) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i inviteDo) First() (*dbschema.Invite, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Invite), nil
	}
}

func (i inviteDo) Take() (*dbschema.Invite, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Invite), nil
	}
}

func (i inviteDo) Last() (*dbschema.Invite, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Invite), nil
	}
}

func (i inviteDo) Find() ([]*dbschema.Invite, error) {
	result, err := i.DO.Find()
	return result.([]*dbschema.Invite), err
}

func (i inviteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.Invite, err error) {
	buf := make([]*dbschema.Invite, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i inviteDo) FindInBatches(result *[]*dbschema.Invite, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i inviteDo) Attrs(attrs ...field.AssignExpr) IInviteDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i inviteDo) Assign(attrs ...field.AssignExpr) IInviteDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i inviteDo) Joins(fields ...field.RelationField) IInviteDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i inviteDo) Preload(fields ...field.RelationField) IInviteDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i inviteDo) FirstOrInit() (*dbschema.Invite, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Invite), nil
	}
}

func (i inviteDo) FirstOrCreate() (*dbschema.Invite, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Invite), nil
	}
}

func (i inviteDo) FindByPage(offset int, limit int) (result []*dbschema.Invite, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i inviteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i inviteDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i inviteDo) Delete(models ...*dbschema.Invite) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *inviteDo) withDO(do gen.Dao) *inviteDo {
	i.DO = *do.(*gen.DO)
	return i
}
