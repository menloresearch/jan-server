// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormgen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"menlo.ai/jan-api-gateway/app/infrastructure/database/dbschema"
)

func newProjectMember(db *gorm.DB, opts ...gen.DOOption) projectMember {
	_projectMember := projectMember{}

	_projectMember.projectMemberDo.UseDB(db, opts...)
	_projectMember.projectMemberDo.UseModel(&dbschema.ProjectMember{})

	tableName := _projectMember.projectMemberDo.TableName()
	_projectMember.ALL = field.NewAsterisk(tableName)
	_projectMember.ID = field.NewUint(tableName, "id")
	_projectMember.CreatedAt = field.NewTime(tableName, "created_at")
	_projectMember.UpdatedAt = field.NewTime(tableName, "updated_at")
	_projectMember.DeletedAt = field.NewField(tableName, "deleted_at")
	_projectMember.UserID = field.NewUint(tableName, "user_id")
	_projectMember.ProjectID = field.NewUint(tableName, "project_id")
	_projectMember.Role = field.NewString(tableName, "role")

	_projectMember.fillFieldMap()

	return _projectMember
}

type projectMember struct {
	projectMemberDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UserID    field.Uint
	ProjectID field.Uint
	Role      field.String

	fieldMap map[string]field.Expr
}

func (p projectMember) Table(newTableName string) *projectMember {
	p.projectMemberDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectMember) As(alias string) *projectMember {
	p.projectMemberDo.DO = *(p.projectMemberDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectMember) updateTableName(table string) *projectMember {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.UserID = field.NewUint(table, "user_id")
	p.ProjectID = field.NewUint(table, "project_id")
	p.Role = field.NewString(table, "role")

	p.fillFieldMap()

	return p
}

func (p *projectMember) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectMember) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["role"] = p.Role
}

func (p projectMember) clone(db *gorm.DB) projectMember {
	p.projectMemberDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectMember) replaceDB(db *gorm.DB) projectMember {
	p.projectMemberDo.ReplaceDB(db)
	return p
}

type projectMemberDo struct{ gen.DO }

type IProjectMemberDo interface {
	gen.SubQuery
	Debug() IProjectMemberDo
	WithContext(ctx context.Context) IProjectMemberDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectMemberDo
	WriteDB() IProjectMemberDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectMemberDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectMemberDo
	Not(conds ...gen.Condition) IProjectMemberDo
	Or(conds ...gen.Condition) IProjectMemberDo
	Select(conds ...field.Expr) IProjectMemberDo
	Where(conds ...gen.Condition) IProjectMemberDo
	Order(conds ...field.Expr) IProjectMemberDo
	Distinct(cols ...field.Expr) IProjectMemberDo
	Omit(cols ...field.Expr) IProjectMemberDo
	Join(table schema.Tabler, on ...field.Expr) IProjectMemberDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectMemberDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectMemberDo
	Group(cols ...field.Expr) IProjectMemberDo
	Having(conds ...gen.Condition) IProjectMemberDo
	Limit(limit int) IProjectMemberDo
	Offset(offset int) IProjectMemberDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectMemberDo
	Unscoped() IProjectMemberDo
	Create(values ...*dbschema.ProjectMember) error
	CreateInBatches(values []*dbschema.ProjectMember, batchSize int) error
	Save(values ...*dbschema.ProjectMember) error
	First() (*dbschema.ProjectMember, error)
	Take() (*dbschema.ProjectMember, error)
	Last() (*dbschema.ProjectMember, error)
	Find() ([]*dbschema.ProjectMember, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.ProjectMember, err error)
	FindInBatches(result *[]*dbschema.ProjectMember, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbschema.ProjectMember) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectMemberDo
	Assign(attrs ...field.AssignExpr) IProjectMemberDo
	Joins(fields ...field.RelationField) IProjectMemberDo
	Preload(fields ...field.RelationField) IProjectMemberDo
	FirstOrInit() (*dbschema.ProjectMember, error)
	FirstOrCreate() (*dbschema.ProjectMember, error)
	FindByPage(offset int, limit int) (result []*dbschema.ProjectMember, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectMemberDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectMemberDo) Debug() IProjectMemberDo {
	return p.withDO(p.DO.Debug())
}

func (p projectMemberDo) WithContext(ctx context.Context) IProjectMemberDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectMemberDo) ReadDB() IProjectMemberDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectMemberDo) WriteDB() IProjectMemberDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectMemberDo) Session(config *gorm.Session) IProjectMemberDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectMemberDo) Clauses(conds ...clause.Expression) IProjectMemberDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectMemberDo) Returning(value interface{}, columns ...string) IProjectMemberDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectMemberDo) Not(conds ...gen.Condition) IProjectMemberDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectMemberDo) Or(conds ...gen.Condition) IProjectMemberDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectMemberDo) Select(conds ...field.Expr) IProjectMemberDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectMemberDo) Where(conds ...gen.Condition) IProjectMemberDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectMemberDo) Order(conds ...field.Expr) IProjectMemberDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectMemberDo) Distinct(cols ...field.Expr) IProjectMemberDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectMemberDo) Omit(cols ...field.Expr) IProjectMemberDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectMemberDo) Join(table schema.Tabler, on ...field.Expr) IProjectMemberDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectMemberDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectMemberDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectMemberDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectMemberDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectMemberDo) Group(cols ...field.Expr) IProjectMemberDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectMemberDo) Having(conds ...gen.Condition) IProjectMemberDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectMemberDo) Limit(limit int) IProjectMemberDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectMemberDo) Offset(offset int) IProjectMemberDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectMemberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectMemberDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectMemberDo) Unscoped() IProjectMemberDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectMemberDo) Create(values ...*dbschema.ProjectMember) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectMemberDo) CreateInBatches(values []*dbschema.ProjectMember, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectMemberDo) Save(values ...*dbschema.ProjectMember) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectMemberDo) First() (*dbschema.ProjectMember, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ProjectMember), nil
	}
}

func (p projectMemberDo) Take() (*dbschema.ProjectMember, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ProjectMember), nil
	}
}

func (p projectMemberDo) Last() (*dbschema.ProjectMember, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ProjectMember), nil
	}
}

func (p projectMemberDo) Find() ([]*dbschema.ProjectMember, error) {
	result, err := p.DO.Find()
	return result.([]*dbschema.ProjectMember), err
}

func (p projectMemberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.ProjectMember, err error) {
	buf := make([]*dbschema.ProjectMember, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectMemberDo) FindInBatches(result *[]*dbschema.ProjectMember, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectMemberDo) Attrs(attrs ...field.AssignExpr) IProjectMemberDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectMemberDo) Assign(attrs ...field.AssignExpr) IProjectMemberDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectMemberDo) Joins(fields ...field.RelationField) IProjectMemberDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectMemberDo) Preload(fields ...field.RelationField) IProjectMemberDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectMemberDo) FirstOrInit() (*dbschema.ProjectMember, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ProjectMember), nil
	}
}

func (p projectMemberDo) FirstOrCreate() (*dbschema.ProjectMember, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ProjectMember), nil
	}
}

func (p projectMemberDo) FindByPage(offset int, limit int) (result []*dbschema.ProjectMember, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectMemberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectMemberDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectMemberDo) Delete(models ...*dbschema.ProjectMember) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectMemberDo) withDO(do gen.Dao) *projectMemberDo {
	p.DO = *do.(*gen.DO)
	return p
}
