import http from 'k6/http';
import { check, sleep } from 'k6';
import { Trend, Counter } from 'k6/metrics';

// ====== Config via ENV (with defaults) ======
const BASE = __ENV.BASE || 'https://api-dev.jan.ai';
const DURATION_MINUTES = Number(__ENV.DURATION_MIN || 2);
const TARGET_RPS = Number(__ENV.HEALTH_RPS || 5);
const API_KEY = __ENV.API_KEY || '';
const LOADTEST_TOKEN = __ENV.LOADTEST_TOKEN || '';

// ====== Common headers ======
function buildHeaders(extra = {}) {
  const h = { 'Content-Type': 'application/json', ...extra };
  if (API_KEY) h['Authorization'] = `Bearer ${API_KEY}`;
  if (LOADTEST_TOKEN) h['x-loadtest-token'] = LOADTEST_TOKEN;
  return h;
}

// ====== Custom metrics ======
const healthResponseTime = new Trend('health_response_time_ms', true);
const healthErrors = new Counter('health_errors');

// ====== Scenarios ======
const minutes = (n) => `${n}m`;

export const options = {
  scenarios: {
    health_check: {
      executor: 'ramping-arrival-rate',
      startRate: 1,
      timeUnit: '1s',
      preAllocatedVUs: 10,
      maxVUs: 50,
      stages: [
        { duration: minutes(1), target: TARGET_RPS },
        { duration: minutes(DURATION_MINUTES - 2 > 0 ? DURATION_MINUTES - 2 : 1), target: TARGET_RPS },
        { duration: minutes(1), target: 0 },
      ],
      exec: 'checkHealth',
      tags: { scenario: 'health_check' },
    },
  },
  thresholds: {
    'http_req_failed': ['rate<0.01'],
    'health_response_time_ms': ['p(95)<500'],
  },
  discardResponseBodies: false,
};

// ====== Exec functions ======
export function checkHealth() {
  // Health check endpoint
  let res = http.get(`${BASE}/health`, { headers: buildHeaders() });
  
  const status = String(res.status || 0);
  const tags = { scenario: 'health_check', status };
  
  healthResponseTime.add(res.timings.duration, tags);
  
  const ok = check(res, {
    'status 200': (r) => r.status === 200,
    'response time < 1000ms': (r) => r.timings.duration < 1000,
  });

  if (!ok) {
    healthErrors.add(1);
  }
  
  sleep(1);
}
