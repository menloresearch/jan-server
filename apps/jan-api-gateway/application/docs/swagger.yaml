basePath: /
definitions:
  app_interfaces_http_routes_jan_v1_auth.GetMeResponse:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  app_interfaces_http_routes_jan_v1_auth.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
    type: object
  app_interfaces_http_routes_jan_v1_auth_google.GoogleCallbackRequest:
    properties:
      code:
        type: string
      state:
        type: string
    required:
    - code
    type: object
  app_interfaces_http_routes_jan_v1_auth_google.GoogleCallbackResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
    type: object
  app_interfaces_http_routes_jan_v1_chat.ChatCompletionResponseSwagger:
    properties:
      choices:
        items:
          $ref: '#/definitions/openai.ChatCompletionChoice'
        type: array
      created:
        type: integer
      id:
        type: string
      model:
        type: string
      object:
        type: string
      usage:
        $ref: '#/definitions/openai.Usage'
    type: object
  app_interfaces_http_routes_jan_v1_organization.OrganizationResponse:
    properties:
      createdAt:
        type: string
      enabled:
        type: boolean
      name:
        type: string
      publicID:
        type: string
      updatedAt:
        type: string
    type: object
  app_interfaces_http_routes_jan_v1_organization_api_keys.ApiKeyResponse:
    properties:
      apikeyType:
        type: string
      description:
        type: string
      enabled:
        type: boolean
      expiresAt:
        type: string
      id:
        type: string
      key:
        type: string
      last_usedAt:
        type: string
      permissions:
        type: string
      plaintextHint:
        type: string
    type: object
  app_interfaces_http_routes_jan_v1_organization_api_keys.CreateAdminKeyRequest:
    properties:
      description:
        type: string
    type: object
  app_interfaces_http_routes_jan_v1_organization_projects.ProjectResponse:
    properties:
      archivedAt:
        type: string
      createdAt:
        type: string
      name:
        type: string
      organizationID:
        type: integer
      publicID:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  app_interfaces_http_routes_jan_v1_organization_projects_api_keys.ApiKeyResponse:
    properties:
      apikeyType:
        type: string
      description:
        type: string
      enabled:
        type: boolean
      expiresAt:
        type: string
      id:
        type: string
      key:
        type: string
      last_usedAt:
        type: string
      permissions:
        type: string
      plaintextHint:
        type: string
    type: object
  app_interfaces_http_routes_jan_v1_organization_projects_api_keys.CreateApiKeyRequest:
    properties:
      description:
        type: string
      expiresAt:
        type: string
    type: object
  app_interfaces_http_routes_v1.Model:
    properties:
      created:
        type: integer
      id:
        type: string
      object:
        type: string
      owned_by:
        type: string
    type: object
  app_interfaces_http_routes_v1.ModelsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1.Model'
        type: array
      object:
        type: string
    type: object
  app_interfaces_http_routes_v1_chat.ChatCompletionResponseSwagger:
    properties:
      choices:
        items:
          $ref: '#/definitions/openai.ChatCompletionChoice'
        type: array
      created:
        type: integer
      id:
        type: string
      model:
        type: string
      object:
        type: string
      usage:
        $ref: '#/definitions/openai.Usage'
    type: object
  app_interfaces_http_routes_v1_organization.AdminAPIKeyDeletedResponse:
    properties:
      deleted:
        type: boolean
      id:
        type: string
      object:
        type: string
    type: object
  app_interfaces_http_routes_v1_organization.AdminApiKeyListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization.OrganizationAdminAPIKeyResponse'
        type: array
      first_id:
        type: string
      has_more:
        type: boolean
      last_id:
        type: string
      object:
        example: list
        type: string
    type: object
  app_interfaces_http_routes_v1_organization.CreateOrganizationAdminAPIKeyRequest:
    properties:
      name:
        example: My Admin API Key
        type: string
    required:
    - name
    type: object
  app_interfaces_http_routes_v1_organization.OrganizationAdminAPIKeyResponse:
    properties:
      created_at:
        example: 1698765432
        type: integer
      id:
        example: key_1234567890
        type: string
      last_used_at:
        example: 1698765432
        type: integer
      name:
        example: My Admin API Key
        type: string
      object:
        example: api_key
        type: string
      owner:
        $ref: '#/definitions/app_interfaces_http_routes_v1_organization.Owner'
      redacted_value:
        example: sk-...abcd
        type: string
      value:
        example: sk-abcdef1234567890
        type: string
    type: object
  app_interfaces_http_routes_v1_organization.Owner:
    properties:
      created_at:
        example: 1698765432
        type: integer
      id:
        example: user_1234567890
        type: string
      name:
        example: John Doe
        type: string
      object:
        example: user
        type: string
      role:
        example: admin
        type: string
      type:
        example: user
        type: string
    type: object
  app_interfaces_http_routes_v1_organization_projects.CreateProjectRequest:
    properties:
      name:
        example: New AI Project
        type: string
    required:
    - name
    type: object
  app_interfaces_http_routes_v1_organization_projects.ProjectListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.ProjectResponse'
        type: array
      first_id:
        type: string
      has_more:
        type: boolean
      last_id:
        type: string
      object:
        example: list
        type: string
    type: object
  app_interfaces_http_routes_v1_organization_projects.ProjectResponse:
    properties:
      archived_at:
        example: 1698765432
        type: integer
      created_at:
        example: 1698765432
        type: integer
      id:
        example: proj_1234567890
        type: string
      name:
        example: My First Project
        type: string
      object:
        example: project
        type: string
      status:
        type: string
    type: object
  app_interfaces_http_routes_v1_organization_projects.UpdateProjectRequest:
    properties:
      name:
        example: Updated AI Project
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.AnnotationResponse:
    properties:
      end_index:
        type: integer
      file_id:
        type: string
      index:
        type: integer
      start_index:
        type: integer
      text:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ContentResponse:
    properties:
      file:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.FileContentResponse'
      image:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ImageContentResponse'
      input_text:
        type: string
      output_text:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.OutputTextResponse'
      text:
        $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.TextResponse'
      type:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationContentRequest:
    properties:
      text:
        type: string
      type:
        type: string
    required:
    - type
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationItemListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationItemResponse'
        type: array
      first_id:
        type: string
      has_more:
        type: boolean
      last_id:
        type: string
      object:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationItemRequest:
    properties:
      content:
        items:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationContentRequest'
        type: array
      role:
        type: string
      type:
        type: string
    required:
    - content
    - type
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationItemResponse:
    properties:
      content:
        items:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ContentResponse'
        type: array
      created_at:
        type: integer
      id:
        type: string
      object:
        type: string
      role:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationResponse:
    properties:
      created_at:
        type: integer
      id:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      object:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.CreateConversationRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationItemRequest'
        type: array
      metadata:
        additionalProperties:
          type: string
        type: object
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.CreateItemsRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationItemRequest'
        type: array
    required:
    - items
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.DeletedConversationResponse:
    properties:
      deleted:
        type: boolean
      id:
        type: string
      object:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.FileContentResponse:
    properties:
      file_id:
        type: string
      mime_type:
        type: string
      name:
        type: string
      size:
        type: integer
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ImageContentResponse:
    properties:
      detail:
        type: string
      file_id:
        type: string
      url:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.OutputTextResponse:
    properties:
      annotations:
        items:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.AnnotationResponse'
        type: array
      text:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.TextResponse:
    properties:
      value:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.UpdateConversationRequest:
    properties:
      metadata:
        additionalProperties:
          type: string
        type: object
    required:
    - metadata
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse:
    properties:
      code:
        type: string
      error:
        type: string
    type: object
  menlo_ai_jan-api-gateway_app_interfaces_http_responses.GeneralResponse-app_interfaces_http_routes_jan_v1_auth_GetMeResponse:
    properties:
      result:
        $ref: '#/definitions/app_interfaces_http_routes_jan_v1_auth.GetMeResponse'
      status:
        type: string
    type: object
  ? menlo_ai_jan-api-gateway_app_interfaces_http_responses.GeneralResponse-app_interfaces_http_routes_jan_v1_auth_RefreshTokenResponse
  : properties:
      result:
        $ref: '#/definitions/app_interfaces_http_routes_jan_v1_auth.RefreshTokenResponse'
      status:
        type: string
    type: object
  ? menlo_ai_jan-api-gateway_app_interfaces_http_responses.GeneralResponse-app_interfaces_http_routes_jan_v1_auth_google_GoogleCallbackResponse
  : properties:
      result:
        $ref: '#/definitions/app_interfaces_http_routes_jan_v1_auth_google.GoogleCallbackResponse'
      status:
        type: string
    type: object
  ? menlo_ai_jan-api-gateway_app_interfaces_http_responses.GeneralResponse-app_interfaces_http_routes_jan_v1_organization_api_keys_ApiKeyResponse
  : properties:
      result:
        $ref: '#/definitions/app_interfaces_http_routes_jan_v1_organization_api_keys.ApiKeyResponse'
      status:
        type: string
    type: object
  ? menlo_ai_jan-api-gateway_app_interfaces_http_responses.GeneralResponse-app_interfaces_http_routes_jan_v1_organization_projects_api_keys_ApiKeyResponse
  : properties:
      result:
        $ref: '#/definitions/app_interfaces_http_routes_jan_v1_organization_projects_api_keys.ApiKeyResponse'
      status:
        type: string
    type: object
  ? menlo_ai_jan-api-gateway_app_interfaces_http_responses.ListResponse-app_interfaces_http_routes_jan_v1_organization_OrganizationResponse
  : properties:
      results:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_jan_v1_organization.OrganizationResponse'
        type: array
      status:
        type: string
      total:
        type: integer
    type: object
  ? menlo_ai_jan-api-gateway_app_interfaces_http_responses.ListResponse-app_interfaces_http_routes_jan_v1_organization_api_keys_ApiKeyResponse
  : properties:
      results:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_jan_v1_organization_api_keys.ApiKeyResponse'
        type: array
      status:
        type: string
      total:
        type: integer
    type: object
  ? menlo_ai_jan-api-gateway_app_interfaces_http_responses.ListResponse-app_interfaces_http_routes_jan_v1_organization_projects_ProjectResponse
  : properties:
      results:
        items:
          $ref: '#/definitions/app_interfaces_http_routes_jan_v1_organization_projects.ProjectResponse'
        type: array
      status:
        type: string
      total:
        type: integer
    type: object
  openai.ChatCompletionChoice:
    properties:
      content_filter_results:
        $ref: '#/definitions/openai.ContentFilterResults'
      finish_reason:
        allOf:
        - $ref: '#/definitions/openai.FinishReason'
        description: |-
          FinishReason
          stop: API returned complete message,
          or a message terminated by one of the stop sequences provided via the stop parameter
          length: Incomplete model output due to max_tokens parameter or token limit
          function_call: The model decided to call a function
          content_filter: Omitted content due to a flag from our content filters
          null: API response still in progress or incomplete
      index:
        type: integer
      logprobs:
        $ref: '#/definitions/openai.LogProbs'
      message:
        $ref: '#/definitions/openai.ChatCompletionMessage'
    type: object
  openai.ChatCompletionMessage:
    properties:
      content:
        type: string
      function_call:
        $ref: '#/definitions/openai.FunctionCall'
      multiContent:
        items:
          $ref: '#/definitions/openai.ChatMessagePart'
        type: array
      name:
        description: |-
          This property isn't in the official documentation, but it's in
          the documentation for the official library for python:
          - https://github.com/openai/openai-python/blob/main/chatml.md
          - https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb
        type: string
      reasoning_content:
        description: |-
          This property is used for the "reasoning" feature supported by deepseek-reasoner
          which is not in the official documentation.
          the doc from deepseek:
          - https://api-docs.deepseek.com/api/create-chat-completion#responses
        type: string
      refusal:
        type: string
      role:
        type: string
      tool_call_id:
        description: For Role=tool prompts this should be set to the ID given in the
          assistant's prior request to call a tool.
        type: string
      tool_calls:
        description: For Role=assistant prompts this may be set to the tool calls
          generated by the model, such as function calls.
        items:
          $ref: '#/definitions/openai.ToolCall'
        type: array
    type: object
  openai.ChatCompletionRequest:
    properties:
      chat_template_kwargs:
        additionalProperties: {}
        description: |-
          ChatTemplateKwargs provides a way to add non-standard parameters to the request body.
          Additional kwargs to pass to the template renderer. Will be accessible by the chat template.
          Such as think mode for qwen3. "chat_template_kwargs": {"enable_thinking": false}
          https://qwen.readthedocs.io/en/latest/deployment/vllm.html#thinking-non-thinking-modes
        type: object
      frequency_penalty:
        type: number
      function_call:
        description: 'Deprecated: use ToolChoice instead.'
      functions:
        description: 'Deprecated: use Tools instead.'
        items:
          $ref: '#/definitions/openai.FunctionDefinition'
        type: array
      guided_choice:
        description: |-
          GuidedChoice is a vLLM-specific extension that restricts the model's output
          to one of the predefined string choices provided in this field. This feature
          is used to constrain the model's responses to a controlled set of options,
          ensuring predictable and consistent outputs in scenarios where specific
          choices are required.
        items:
          type: string
        type: array
      logit_bias:
        additionalProperties:
          type: integer
        description: |-
          LogitBias is must be a token id string (specified by their token ID in the tokenizer), not a word string.
          incorrect: `"logit_bias":{"You": 6}`, correct: `"logit_bias":{"1639": 6}`
          refs: https://platform.openai.com/docs/api-reference/chat/create#chat/create-logit_bias
        type: object
      logprobs:
        description: |-
          LogProbs indicates whether to return log probabilities of the output tokens or not.
          If true, returns the log probabilities of each output token returned in the content of message.
          This option is currently not available on the gpt-4-vision-preview model.
        type: boolean
      max_completion_tokens:
        description: |-
          MaxCompletionTokens An upper bound for the number of tokens that can be generated for a completion,
          including visible output tokens and reasoning tokens https://platform.openai.com/docs/guides/reasoning
        type: integer
      max_tokens:
        description: |-
          MaxTokens The maximum number of tokens that can be generated in the chat completion.
          This value can be used to control costs for text generated via API.
          Deprecated: use MaxCompletionTokens. Not compatible with o1-series models.
          refs: https://platform.openai.com/docs/api-reference/chat/create#chat-create-max_tokens
        type: integer
      messages:
        items:
          $ref: '#/definitions/openai.ChatCompletionMessage'
        type: array
      metadata:
        additionalProperties:
          type: string
        description: Metadata to store with the completion.
        type: object
      model:
        type: string
      "n":
        type: integer
      parallel_tool_calls:
        description: 'Disable the default behavior of parallel tool calls by setting
          it: false.'
      prediction:
        allOf:
        - $ref: '#/definitions/openai.Prediction'
        description: Configuration for a predicted output.
      presence_penalty:
        type: number
      reasoning_effort:
        description: Controls effort on reasoning for reasoning models. It can be
          set to "low", "medium", or "high".
        type: string
      response_format:
        $ref: '#/definitions/openai.ChatCompletionResponseFormat'
      safety_identifier:
        description: |-
          A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies.
          The IDs should be a string that uniquely identifies each user.
          We recommend hashing their username or email address, in order to avoid sending us any identifying information.
          https://platform.openai.com/docs/api-reference/chat/create#chat_create-safety_identifier
        type: string
      seed:
        type: integer
      service_tier:
        allOf:
        - $ref: '#/definitions/openai.ServiceTier'
        description: Specifies the latency tier to use for processing the request.
      stop:
        items:
          type: string
        type: array
      store:
        description: |-
          Store can be set to true to store the output of this completion request for use in distillations and evals.
          https://platform.openai.com/docs/api-reference/chat/create#chat-create-store
        type: boolean
      stream:
        type: boolean
      stream_options:
        allOf:
        - $ref: '#/definitions/openai.StreamOptions'
        description: 'Options for streaming response. Only set this when you set stream:
          true.'
      temperature:
        type: number
      tool_choice:
        description: This can be either a string or an ToolChoice object.
      tools:
        items:
          $ref: '#/definitions/openai.Tool'
        type: array
      top_logprobs:
        description: |-
          TopLogProbs is an integer between 0 and 5 specifying the number of most likely tokens to return at each
          token position, each with an associated log probability.
          logprobs must be set to true if this parameter is used.
        type: integer
      top_p:
        type: number
      user:
        type: string
    type: object
  openai.ChatCompletionResponseFormat:
    properties:
      json_schema:
        $ref: '#/definitions/openai.ChatCompletionResponseFormatJSONSchema'
      type:
        $ref: '#/definitions/openai.ChatCompletionResponseFormatType'
    type: object
  openai.ChatCompletionResponseFormatJSONSchema:
    properties:
      description:
        type: string
      name:
        type: string
      schema: {}
      strict:
        type: boolean
    type: object
  openai.ChatCompletionResponseFormatType:
    enum:
    - json_object
    - json_schema
    - text
    type: string
    x-enum-varnames:
    - ChatCompletionResponseFormatTypeJSONObject
    - ChatCompletionResponseFormatTypeJSONSchema
    - ChatCompletionResponseFormatTypeText
  openai.ChatMessageImageURL:
    properties:
      detail:
        $ref: '#/definitions/openai.ImageURLDetail'
      url:
        type: string
    type: object
  openai.ChatMessagePart:
    properties:
      image_url:
        $ref: '#/definitions/openai.ChatMessageImageURL'
      text:
        type: string
      type:
        $ref: '#/definitions/openai.ChatMessagePartType'
    type: object
  openai.ChatMessagePartType:
    enum:
    - text
    - image_url
    type: string
    x-enum-varnames:
    - ChatMessagePartTypeText
    - ChatMessagePartTypeImageURL
  openai.CompletionTokensDetails:
    properties:
      accepted_prediction_tokens:
        type: integer
      audio_tokens:
        type: integer
      reasoning_tokens:
        type: integer
      rejected_prediction_tokens:
        type: integer
    type: object
  openai.ContentFilterResults:
    properties:
      hate:
        $ref: '#/definitions/openai.Hate'
      jailbreak:
        $ref: '#/definitions/openai.JailBreak'
      profanity:
        $ref: '#/definitions/openai.Profanity'
      self_harm:
        $ref: '#/definitions/openai.SelfHarm'
      sexual:
        $ref: '#/definitions/openai.Sexual'
      violence:
        $ref: '#/definitions/openai.Violence'
    type: object
  openai.FinishReason:
    enum:
    - stop
    - length
    - function_call
    - tool_calls
    - content_filter
    - "null"
    type: string
    x-enum-varnames:
    - FinishReasonStop
    - FinishReasonLength
    - FinishReasonFunctionCall
    - FinishReasonToolCalls
    - FinishReasonContentFilter
    - FinishReasonNull
  openai.FunctionCall:
    properties:
      arguments:
        description: call function with arguments in JSON format
        type: string
      name:
        type: string
    type: object
  openai.FunctionDefinition:
    properties:
      description:
        type: string
      name:
        type: string
      parameters:
        description: |-
          Parameters is an object describing the function.
          You can pass json.RawMessage to describe the schema,
          or you can pass in a struct which serializes to the proper JSON schema.
          The jsonschema package is provided for convenience, but you should
          consider another specialized library if you require more complex schemas.
      strict:
        type: boolean
    type: object
  openai.Hate:
    properties:
      filtered:
        type: boolean
      severity:
        type: string
    type: object
  openai.ImageURLDetail:
    enum:
    - high
    - low
    - auto
    type: string
    x-enum-varnames:
    - ImageURLDetailHigh
    - ImageURLDetailLow
    - ImageURLDetailAuto
  openai.JailBreak:
    properties:
      detected:
        type: boolean
      filtered:
        type: boolean
    type: object
  openai.LogProb:
    properties:
      bytes:
        description: Omitting the field if it is null
        items:
          type: integer
        type: array
      logprob:
        type: number
      token:
        type: string
      top_logprobs:
        description: |-
          TopLogProbs is a list of the most likely tokens and their log probability, at this token position.
          In rare cases, there may be fewer than the number of requested top_logprobs returned.
        items:
          $ref: '#/definitions/openai.TopLogProbs'
        type: array
    type: object
  openai.LogProbs:
    properties:
      content:
        description: Content is a list of message content tokens with log probability
          information.
        items:
          $ref: '#/definitions/openai.LogProb'
        type: array
    type: object
  openai.Prediction:
    properties:
      content:
        type: string
      type:
        type: string
    type: object
  openai.Profanity:
    properties:
      detected:
        type: boolean
      filtered:
        type: boolean
    type: object
  openai.PromptTokensDetails:
    properties:
      audio_tokens:
        type: integer
      cached_tokens:
        type: integer
    type: object
  openai.SelfHarm:
    properties:
      filtered:
        type: boolean
      severity:
        type: string
    type: object
  openai.ServiceTier:
    enum:
    - auto
    - default
    - flex
    - priority
    type: string
    x-enum-varnames:
    - ServiceTierAuto
    - ServiceTierDefault
    - ServiceTierFlex
    - ServiceTierPriority
  openai.Sexual:
    properties:
      filtered:
        type: boolean
      severity:
        type: string
    type: object
  openai.StreamOptions:
    properties:
      include_usage:
        description: |-
          If set, an additional chunk will be streamed before the data: [DONE] message.
          The usage field on this chunk shows the token usage statistics for the entire request,
          and the choices field will always be an empty array.
          All other chunks will also include a usage field, but with a null value.
        type: boolean
    type: object
  openai.Tool:
    properties:
      function:
        $ref: '#/definitions/openai.FunctionDefinition'
      type:
        $ref: '#/definitions/openai.ToolType'
    type: object
  openai.ToolCall:
    properties:
      function:
        $ref: '#/definitions/openai.FunctionCall'
      id:
        type: string
      index:
        description: Index is not nil only in chat completion chunk object
        type: integer
      type:
        $ref: '#/definitions/openai.ToolType'
    type: object
  openai.ToolType:
    enum:
    - function
    type: string
    x-enum-varnames:
    - ToolTypeFunction
  openai.TopLogProbs:
    properties:
      bytes:
        items:
          type: integer
        type: array
      logprob:
        type: number
      token:
        type: string
    type: object
  openai.Usage:
    properties:
      completion_tokens:
        type: integer
      completion_tokens_details:
        $ref: '#/definitions/openai.CompletionTokensDetails'
      prompt_tokens:
        type: integer
      prompt_tokens_details:
        $ref: '#/definitions/openai.PromptTokensDetails'
      total_tokens:
        type: integer
    type: object
  openai.Violence:
    properties:
      filtered:
        type: boolean
      severity:
        type: string
    type: object
info:
  contact: {}
  description: This is the API gateway for Jan Server.
  title: Jan Server
  version: "1.0"
paths:
  /jan/v1/auth/google/callback:
    post:
      consumes:
      - application/json
      description: Handles the callback from the Google OAuth2 provider to exchange
        the authorization code for a token, verify the user, and issue access and
        refresh tokens.
      parameters:
      - description: Request body containing the authorization code and state
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_jan_v1_auth_google.GoogleCallbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated and returned tokens
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.GeneralResponse-app_interfaces_http_routes_jan_v1_auth_google_GoogleCallbackResponse'
        "400":
          description: Bad request (e.g., invalid state, missing code, or invalid
            claims)
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized (e.g., a user claim is not found or is invalid
            in the context)
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      summary: Google OAuth2 Callback
      tags:
      - Authentication
  /jan/v1/auth/google/login:
    get:
      description: Redirects the user to the Google OAuth2 authorization page to initiate
        the login process.
      responses:
        "307":
          description: Redirects to Google's login page
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      summary: Google OAuth2 Login
      tags:
      - Authentication
  /jan/v1/auth/me:
    get:
      description: Retrieves the profile of the authenticated user based on the provided
        JWT.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user profile
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.GeneralResponse-app_interfaces_http_routes_jan_v1_auth_GetMeResponse'
        "401":
          description: Unauthorized (e.g., missing or invalid JWT)
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Authentication
  /jan/v1/auth/refresh-token:
    get:
      consumes:
      - application/json
      description: Use a valid refresh token to obtain a new access token. The refresh
        token is typically sent in a cookie.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed the access token
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.GeneralResponse-app_interfaces_http_routes_jan_v1_auth_RefreshTokenResponse'
        "400":
          description: Bad Request (e.g., invalid refresh token)
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized (e.g., expired or missing refresh token)
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      summary: Refresh an access token
      tags:
      - Authentication
  /jan/v1/chat/completions:
    post:
      consumes:
      - application/json
      description: Generates a model response for the given chat conversation.
      parameters:
      - description: Chat completion request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/openai.ChatCompletionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_jan_v1_chat.ChatCompletionResponseSwagger'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a chat completion
      tags:
      - Chat
  /jan/v1/conversations:
    post:
      consumes:
      - application/json
      description: Creates a new conversation for the authenticated user
      parameters:
      - description: Create conversation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.CreateConversationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created conversation
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a conversation
      tags:
      - Conversations
  /jan/v1/conversations/{conversation_id}:
    delete:
      description: Deletes a conversation and all its items
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deleted conversation
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.DeletedConversationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a conversation
      tags:
      - Conversations
    get:
      description: Retrieves a conversation by its ID
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Conversation details
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a conversation
      tags:
      - Conversations
    patch:
      consumes:
      - application/json
      description: Updates conversation metadata
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Update conversation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.UpdateConversationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated conversation
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a conversation
      tags:
      - Conversations
  /jan/v1/conversations/{conversation_id}/items:
    get:
      description: Lists all items in a conversation
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Number of items to return (1-100)
        in: query
        name: limit
        type: integer
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      - description: Order of items (asc/desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of items
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationItemListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List items in a conversation
      tags:
      - Conversations
    post:
      consumes:
      - application/json
      description: Adds multiple items to a conversation
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Create items request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.CreateItemsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created items
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationItemListResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create items in a conversation
      tags:
      - Conversations
  /jan/v1/conversations/{conversation_id}/items/{item_id}:
    delete:
      description: Deletes a specific item from a conversation
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Updated conversation
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an item from a conversation
      tags:
      - Conversations
    get:
      description: Retrieves a specific item from a conversation
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item details
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationItemResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an item from a conversation
      tags:
      - Conversations
  /jan/v1/organizations:
    get:
      consumes:
      - application/json
      description: Retrieves a list of organizations owned by the authenticated user.
      parameters:
      - default: 10
        description: Number of organizations to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved organizations.
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ListResponse-app_interfaces_http_routes_jan_v1_organization_OrganizationResponse'
        "400":
          description: Bad request, e.g., invalid pagination parameters.
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized, e.g., invalid or missing token.
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error.
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List organizations
      tags:
      - organizations
  /jan/v1/organizations/{org_public_id}/api_keys:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all API keys associated with an organization.
      parameters:
      - description: Organization Public ID
        in: path
        name: org_public_id
        required: true
        type: string
      - default: 0
        description: offset for pagination
        in: query
        name: offset
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of API keys retrieved successfully
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ListResponse-app_interfaces_http_routes_jan_v1_organization_api_keys_ApiKeyResponse'
        "400":
          description: Bad request, e.g., invalid pagination parameters
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized, e.g., invalid or missing token
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found, e.g., organization not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List API keys for a specific organization
      tags:
      - organization-api-keys
    post:
      consumes:
      - application/json
      description: Creates a new API key with administrative permissions for a specific
        organization.
      parameters:
      - description: Organization Public ID
        in: path
        name: org_public_id
        required: true
        type: string
      - description: Request body for creating an admin key
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_jan_v1_organization_api_keys.CreateAdminKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Admin API key created successfully
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.GeneralResponse-app_interfaces_http_routes_jan_v1_organization_api_keys_ApiKeyResponse'
        "400":
          description: Bad request, e.g., invalid payload or missing IDs
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized, e.g., invalid or missing token
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found, e.g., organization not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new organization-level admin key
      tags:
      - organization-api-keys
  /jan/v1/organizations/{org_public_id}/projects:
    get:
      consumes:
      - application/json
      description: List all projects within a given organization.
      parameters:
      - description: Organization Public ID
        in: path
        name: org_public_id
        required: true
        type: string
      - default: 10
        description: Number of projects to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved projects
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ListResponse-app_interfaces_http_routes_jan_v1_organization_projects_ProjectResponse'
        "400":
          description: Bad request, e.g., invalid pagination parameters or organization
            ID
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized, e.g., invalid or missing token
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found, e.g., organization not found or no projects found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List projects
      tags:
      - projects
  /jan/v1/organizations/{org_public_id}/projects/{project_public_id}/api_keys:
    get:
      consumes:
      - application/json
      description: List API keys for a specific project.
      parameters:
      - description: Organization Public ID
        in: path
        name: org_public_id
        required: true
        type: string
      - description: Project Public ID
        in: path
        name: project_public_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: API key created successfully
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.GeneralResponse-app_interfaces_http_routes_jan_v1_organization_projects_api_keys_ApiKeyResponse'
        "400":
          description: Bad request, e.g., invalid payload or missing IDs
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized, e.g., invalid or missing token
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found, e.g., project or organization not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List new project API key
      tags:
      - project-api-keys
    post:
      consumes:
      - application/json
      description: Creates a new API key for a specific project.
      parameters:
      - description: Organization Public ID
        in: path
        name: org_public_id
        required: true
        type: string
      - description: Project Public ID
        in: path
        name: project_public_id
        required: true
        type: string
      - description: Request body for creating an API key
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_jan_v1_organization_projects_api_keys.CreateApiKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: API key created successfully
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.GeneralResponse-app_interfaces_http_routes_jan_v1_organization_projects_api_keys_ApiKeyResponse'
        "400":
          description: Bad request, e.g., invalid payload or missing IDs
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized, e.g., invalid or missing token
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found, e.g., project or organization not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new project API key
      tags:
      - project-api-keys
  /v1/chat/completions:
    post:
      consumes:
      - application/json
      description: Generates a model response for the given chat conversation.
      parameters:
      - description: Chat completion request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/openai.ChatCompletionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_chat.ChatCompletionResponseSwagger'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a chat completion
      tags:
      - Chat
  /v1/conversations:
    post:
      consumes:
      - application/json
      description: Creates a new conversation for the authenticated user
      parameters:
      - description: Create conversation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.CreateConversationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created conversation
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a conversation
      tags:
      - Conversations
  /v1/conversations/{conversation_id}:
    delete:
      description: Deletes a conversation and all its items
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deleted conversation
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.DeletedConversationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a conversation
      tags:
      - Conversations
    get:
      description: Retrieves a conversation by its ID
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Conversation details
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a conversation
      tags:
      - Conversations
    patch:
      consumes:
      - application/json
      description: Updates conversation metadata
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Update conversation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.UpdateConversationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated conversation
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a conversation
      tags:
      - Conversations
  /v1/conversations/{conversation_id}/items:
    get:
      description: Lists all items in a conversation
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Number of items to return (1-100)
        in: query
        name: limit
        type: integer
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      - description: Order of items (asc/desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of items
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationItemListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List items in a conversation
      tags:
      - Conversations
    post:
      consumes:
      - application/json
      description: Adds multiple items to a conversation
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Create items request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.CreateItemsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created items
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationItemListResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create items in a conversation
      tags:
      - Conversations
  /v1/conversations/{conversation_id}/items/{item_id}:
    delete:
      description: Deletes a specific item from a conversation
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Updated conversation
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an item from a conversation
      tags:
      - Conversations
    get:
      description: Retrieves a specific item from a conversation
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item details
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_handlers_conversation.ConversationItemResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an item from a conversation
      tags:
      - Conversations
  /v1/mcp:
    post:
      consumes:
      - application/json
      description: Handles Model Context Protocol (MCP) requests over an HTTP stream.
        The response is sent as a continuous stream of data.
      parameters:
      - description: MCP request payload
        in: body
        name: request
        required: true
        schema: {}
      produces:
      - text/event-stream
      responses:
        "200":
          description: Streamed response (SSE or chunked transfer)
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: MCP streamable endpoint
      tags:
      - MCP
  /v1/models:
    get:
      consumes:
      - application/json
      description: Retrieves a list of available models that can be used for chat
        completions or other tasks.
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1.ModelsResponse'
      security:
      - BearerAuth: []
      summary: List available models
      tags:
      - Models
  /v1/organization/admin_api_keys:
    get:
      description: Retrieves a paginated list of all admin API keys for the authenticated
        organization.
      parameters:
      - default: '"Bearer <admin_api_key>"'
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - default: 20
        description: The maximum number of items to return
        in: query
        name: limit
        type: integer
      - description: A cursor for use in pagination. The ID of the last object from
          the previous page
        in: query
        name: after
        type: string
      responses:
        "200":
          description: Successfully retrieved the list of admin API keys
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization.AdminApiKeyListResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Admin API Keys
      tags:
      - Admin API Keys
    post:
      consumes:
      - application/json
      description: Creates a new admin API key for an organization. Requires a valid
        admin API key in the Authorization header.
      parameters:
      - default: '"Bearer <admin_api_key>"'
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: API key creation request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization.CreateOrganizationAdminAPIKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created admin API key
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization.OrganizationAdminAPIKeyResponse'
        "400":
          description: Bad request - invalid payload
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Admin API Key
      tags:
      - Admin API Keys
  /v1/organization/admin_api_keys/{id}:
    delete:
      description: Deletes an admin API key by its ID.
      parameters:
      - default: '"Bearer <admin_api_key>"'
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the admin API key to delete
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Successfully deleted the admin API key
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization.AdminAPIKeyDeletedResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found - API key with the given ID does not exist or does
            not belong to the organization
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Admin API Key
      tags:
      - Admin API Keys
    get:
      description: Retrieves a specific admin API key by its ID.
      parameters:
      - default: '"Bearer <admin_api_key>"'
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the admin API key
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Successfully retrieved the admin API key
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization.OrganizationAdminAPIKeyResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found - API key with the given ID does not exist or does
            not belong to the organization
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Admin API Key
      tags:
      - Admin API Keys
  /v1/organization/projects:
    get:
      description: Retrieves a paginated list of all projects for the authenticated
        organization.
      parameters:
      - default: '"Bearer <api_key>"'
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - default: 20
        description: The maximum number of items to return
        in: query
        name: limit
        type: integer
      - description: A cursor for use in pagination. The ID of the last object from
          the previous page
        in: query
        name: after
        type: string
      - description: Whether to include archived projects.
        in: query
        name: include_archived
        type: string
      responses:
        "200":
          description: Successfully retrieved the list of projects
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.ProjectListResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Projects
      tags:
      - Projects
    post:
      consumes:
      - application/json
      description: Creates a new project for an organization.
      parameters:
      - default: '"Bearer <api_key>"'
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project creation request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.CreateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created project
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.ProjectResponse'
        "400":
          description: Bad request - invalid payload
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Project
      tags:
      - Projects
  /v1/organization/projects/{project_id}:
    get:
      description: Retrieves a specific project by its ID.
      parameters:
      - default: '"Bearer <api_key>"'
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the project
        in: path
        name: project_id
        required: true
        type: string
      responses:
        "200":
          description: Successfully retrieved the project
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.ProjectResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found - project with the given ID does not exist or does
            not belong to the organization
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Project
      tags:
      - Projects
    post:
      consumes:
      - application/json
      description: Updates a specific project by its ID.
      parameters:
      - default: '"Bearer <api_key>"'
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the project to update
        in: path
        name: project_id
        required: true
        type: string
      - description: Project update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.UpdateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the project
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.ProjectResponse'
        "400":
          description: Bad request - invalid payload
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found - project with the given ID does not exist
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Project
      tags:
      - Projects
  /v1/organization/projects/{project_id}/archive:
    post:
      description: Archives a specific project by its ID, making it inactive.
      parameters:
      - default: '"Bearer <api_key>"'
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the project to archive
        in: path
        name: project_id
        required: true
        type: string
      responses:
        "200":
          description: Successfully archived the project
          schema:
            $ref: '#/definitions/app_interfaces_http_routes_v1_organization_projects.ProjectResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
        "404":
          description: Not Found - project with the given ID does not exist
          schema:
            $ref: '#/definitions/menlo_ai_jan-api-gateway_app_interfaces_http_responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Archive Project
      tags:
      - Projects
  /v1/version:
    get:
      description: Returns the current build version of the API server.
      produces:
      - application/json
      responses:
        "200":
          description: version info
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get API build version
      tags:
      - System
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
